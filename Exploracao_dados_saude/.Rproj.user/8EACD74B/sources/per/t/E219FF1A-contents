###### Bibliotecas ######

library(shiny)
library(ggplot2)
library(plotly)
library(kableExtra)
library(tidyr)
library(reshape2)
library(DT)
library(stringr)
library("shinyWidgets")
library(Cairo)
options(encoding="utf-8")

###### Códigos auxiliares ######

flag_2020=F

theme_setup=theme(axis.text = element_text(size=12),
          axis.title = element_text(size=16),
          legend.text = element_text(size=16),
          legend.title = element_text(size=16),
          plot.title = element_text(size=22),
          plot.caption = element_text(size=12))

saveData <- function(file,path,file_name) {
  if(!file.exists(paste0(path,'/',file_name))){
    file.create(paste0(path,'/',file_name))
  }
  fileConn<-file(paste0(path,'/',file_name))
  writeLines(file,fileConn)
  close(fileConn)
}
loadData <- function(file,path) {
  readLines(paste0(path,'/',file))
}
createDir <- function(path) {
  dir.create(path)
}
checkDir <- function(path) {
  dir.exists(path)
}
checkFile <- function(path) {
  file.exists(path)
}

check_directory=function(nome,empresa,cobertura,produto){
    if(!is.null(produto)){
        file_name=paste0(dir,'textos')
        for(next_dir in c(empresa,cobertura,produto,nome)){
            file_name=paste0(file_name,'/',next_dir)
            if(!checkDir(file_name)){
                createDir(file_name)
            }
        }
        if(!checkDir(paste0(file_name,'/history'))){
            createDir(paste0(file_name,'/history'))
        }
        if(!checkFile(paste0(file_name,'/current.txt'))){
            saveData('\n',file_name,'current.txt')
        }
    }
    
    file_name=paste0(dir,'textos')
    for(next_dir in c('default',nome)){
        file_name=paste0(file_name,'/',next_dir)
        if(!checkDir(file_name)){
            createDir(file_name)
        }
    }
    if(!checkDir(paste0(file_name,'/history'))){
        createDir(paste0(file_name,'/history'))
    }
    if(!checkFile(paste0(file_name,'/current.txt'))){
        saveData('\n',file_name,'current.txt')
    }

}

salvar_texto=function(nome,texto,empresa,cobertura,produto,usr){
    check_directory(nome,empresa,cobertura,produto)
    file_name=paste0(dir,'textos/',paste(empresa,cobertura,produto,nome,sep='/'))

    saveData(texto,file_name,'current.txt')
    
    history_name=str_replace_all(Sys.time(),'-','_')
    history_name=str_replace_all(history_name,':','_')
    history_name=paste(history_name,usr)
    file.create(paste0(file_name,paste0('/history/',history_name,'.txt')))
    saveData(texto,paste0(file_name,'/history/'),paste0(history_name,'.txt'))
    
}
carregar_texto=function(nome,empresa,cobertura,produto){
    check_directory(nome,empresa,cobertura,produto)
    if(is.null(produto)){
        final_text<-loadData('current.txt',paste0(dir,'textos/',paste('default',nome,sep='/')))
    }else{
        final_text<-loadData('current.txt',paste0(dir,'textos/',paste(empresa,cobertura,produto,nome,sep='/')))
        teste_text<-str_replace_all(final_text,'<br>','')
        teste_text<-str_replace_all(teste_text,' ','')
        if(all(str_count(teste_text)==0)){
            final_text<-loadData('current.txt',paste0(dir,'textos/',paste('default',nome,sep='/')))
        }
    }
    final_text<-str_replace_all(final_text,'<br>','\n')
    return(final_text)
}
carregar_history=function(nome,empresa,cobertura,produto,history){
    final_text<-loadData(history,paste0(dir,'textos/',paste(empresa,cobertura,produto,nome,'history',sep='/')))
    teste_text<-str_replace_all(final_text,'<br>','')
    teste_text<-str_replace_all(teste_text,' ','')
    final_text<-str_replace_all(final_text,'<br>','\n')
    return(final_text)
}
salvar_padrao=function(nome,texto){
    file_name=paste0(dir,'textos/',paste('default',nome,sep='/'))
    saveData(texto,file_name,'current.txt')
    
    history_name=str_replace_all(Sys.time(),'-','_')
    history_name=str_replace_all(history_name,':','_')
    saveData(texto,paste0(file_name,'/history/'),paste0(history_name,'.txt'))

}
deleta_texto=function(nome,empresa,cobertura,produto){
    file_name=paste0(dir,'textos/',paste(empresa,cobertura,produto,nome,sep='/'))

    saveData('\n',file_name,'current.txt')
    
}

gera_media_movel=function(dados,n){
    n_inicial=length(dados)
    dados_final=c(1:(n_inicial-n+1))*0
    for(indice in c(1:(n_inicial-n+1))){
        dados_final[indice]=mean(dados[indice:(indice+n-1)])
    }
    return(dados_final)
}

calcula_max=function(pre_max){
    value=ifelse(log10(max(pre_max))%%1>0.1,10**(floor(log10(max(pre_max)))),10**(floor(log10(max(pre_max)))-1))
    interval_size=((max(pre_max)%/%value)+2)
    
    value=ifelse(interval_size<4,value/2,value)
    interval_size=ifelse(interval_size<4,interval_size*2,interval_size)
    
    max_value=value*interval_size
    
    return(list(value,interval_size,max_value))
}

set_format=function(text){
    formatC(text,0, format="d", big.mark='.',decimal.mark = ',')
    }

gera_grafico_piramide=function(plot_dados,tipo,pop_name,color_by='ANO'){
    maximos=calcula_max(plot_dados[[tipo]])
    value=maximos[[1]]
    interval_size=maximos[[2]]
    max_value=maximos[[3]]
    
    plot_dados$Value=plot_dados[[tipo]]
    plot_dados$Color=plot_dados[[color_by]]
    
    if(color_by=='ANO'){
        plot_dados=plot_dados[plot_dados$ANO %in% anos_presentes,]
    }

    pl=ggplot(plot_dados)+
        geom_line(aes(x=IDADE,y=Value*ifelse(SEXO=='M',1,-1),color=Color,group=SEXO),stat='identity',size=0.5)+
        scale_x_continuous('Idade', breaks=c(0:12)*10, labels=(c(0:12)*10), limits=c(0,120),expand=c(0,0))+
        scale_y_continuous(name=ifelse(tipo=='EXP','Exposição',ifelse(tipo=='OBT','Óbitos','Entradas em invalidez')),
                           breaks=c(-interval_size:interval_size)*value,
                           limits=c(-max_value,max_value),expand=c(0,0),
                           labels=set_format(abs(c(-interval_size:interval_size))*value))+
        geom_text(aes(x=c(10),y=c(-max_value*0.8),label=c('Feminino')))+
        geom_text(aes(x=c(10),y=c(max_value*0.8),label=c('Masculino')))+
        coord_flip()+
        scale_color_hue('')+
        labs(title=paste(ifelse(tipo=='EXP','Exposição etária',ifelse(tipo=='OBT','Óbitos por idade','Entradas em invalidez por idade')),pop_name),caption=fonte)+
        theme_bw()+theme(legend.position='bottom',axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
    turn_dynamic(pl)}

gera_heatmap=function(plot_dados,sexo,tipo,titulo,flag_log){
    plot_dados=plot_dados[plot_dados$SEXO==sexo,]
    plot_dados$ANO=as.numeric(as.character(plot_dados$ANO))
    
    if(flag_log){
        plot_dados$EXP=log10(plot_dados[[tipo]])
        plot_dados=plot_dados[plot_dados$IDADE<=80 & plot_dados$IDADE>=20,]
    }
    else{
        plot_dados$EXP=plot_dados[[tipo]]
        limits=c(0,120)
    }
    pl=ggplot(plot_dados[plot_dados$ANO %in% range_ano,])+
        geom_tile(aes(x=ANO,y=IDADE,fill=EXP))+
        scale_fill_gradient('',high=high_color,low=low_color)+
        scale_x_continuous('Ano',expand=c(0,0),breaks=range_ano)+
        scale_y_continuous('Idade',expand=c(0,0),breaks=c(0:12)*10,labels=c(0:12)*10)+
        labs(title=titulo,caption=fonte)+
        theme_bw()+theme_setup+theme(legend.position="none",axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
    return(pl)
}

gera_grafico_tabua=function(tabua,tipo,sexo,titulo,input,outra_tabua=NA){
    # Calculando médias móveis e taxas de mortalidade
    if(tipo!='INV'){
      if(tipo=='Mx'){
        for(ano in unique(tabua$ANO)){
            tabua$EXP[tabua$ANO==ano & tabua$IDADE>=2 & tabua$IDADE<=118]=gera_media_movel(tabua$EXP[tabua$ANO==ano],5)
            tabua$OBT[tabua$ANO==ano & tabua$IDADE>=2 & tabua$IDADE<=118]=gera_media_movel(tabua$OBT_EMPRESA[tabua$ANO==ano],5)
        }
        tabua=tabua[tabua$IDADE>=2 & tabua$IDADE<=118,]
        tabua$TAXA=tabua$OBT/tabua$EXP
      }else{
        for(ano in unique(tabua$ANO)){
          tabua$EXP[tabua$ANO==ano & tabua$IDADE>=2 & tabua$IDADE<=118]=gera_media_movel(tabua$EXP[tabua$ANO==ano],5)
          tabua$OBT[tabua$ANO==ano & tabua$IDADE>=2 & tabua$IDADE<=118]=gera_media_movel(tabua$OBT[tabua$ANO==ano],5)
        }
        tabua=tabua[tabua$IDADE>=2 & tabua$IDADE<=118,]
        tabua$TAXA=tabua$OBT/tabua$EXP
      }
    }else{
        tabua$IDADE=5*round(tabua$IDADE/5)
        tabua=aggregate(.~IDADE,tabua,sum)
        tabua$TAXA=ifelse(tabua$EXP==0,0,tabua$INV/tabua$EXP)
        tabua$ANO='Taxa observada'
    }
    
    if(length(tabua$IDADE)==0){
        line=geom_text(aes(x=60,y=10**-2.5,label="Selecione algo na tabela/mapa acima para vizualizar este gráfico."))
    }else{
        tabua$TAXA=ifelse(tabua$TAXA==0,NA,tabua$TAXA)
        line=geom_line(stat = "identity",aes(x=tabua$IDADE,y=tabua$TAXA,color=tabua$ANO))
    }
    
    color_range=c('black',rainbow(length(unique(tabua$ANO)),s=0.5))
    color_order=order(c(unique(BR_EMS[[paste(sexo,input$Cobertura,sep='_')]]$id_tabua),unique(tabua$ANO)))
    
    pl=ggplot()+
        line+
        geom_line(stat = "identity",aes(x=BR_EMS[[paste(sexo,input$Cobertura,sep='_')]]$idade,y=BR_EMS[[paste(sexo,input$Cobertura,sep='_')]]$Mx,color=BR_EMS[[paste(sexo,input$Cobertura,sep='_')]]$id_tabua))+
        scale_colour_manual(name='',
                            values=color_range[color_order])+
        scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
        scale_y_log10('Taxa',breaks = 10**c(-6:0),limits=10**c(-5,0),
                      labels = 10**c(-6:0))+
        labs(title=titulo,caption=fonte)+
        theme_bw()+theme(legend.position="right",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
    pl
}

gera_grafico_razao=function(tabuas,sexo,pop_name){
    maximos=calcula_max((tabuas$Mx/tabuas$Mx_DATAPREV)[tabuas$IDADE>=20 & tabuas$IDADE<=80 & tabuas$Mx_DATAPREV>0])
    value=maximos[[1]]
    interval_size=maximos[[2]]
    max_value=maximos[[3]]
    
    pl=ggplot(tabuas,aes(x=IDADE,y=Mx/Mx_DATAPREV,color=ANO))+
        geom_line(stat = "identity")+
        scale_color_hue('')+
        scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(30,90),expand=c(0,0))+
        scale_y_continuous('Razão entre as tábuas',limits=c(0,max_value),breaks=c(0:interval_size)*value)+
        labs(title=paste('Razão com a BR - EMS',ifelse(sexo=='M', 'masculina','feminina'),pop_name))+
        theme_bw()+theme(legend.position="right",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
    turn_dynamic(pl)
}

gera_grafico_barras=function(dados,tipo,titulo){
    pl=ggplot(dados)+
        geom_bar(aes_string(x='ANO',y=tipo,fill='CLASSE'),stat='identity')+
        scale_fill_hue('')+
        scale_y_continuous(name='Percentual do total',labels=c('0%','25%','50%','75%','100%'),expand=c(0,0))+
        scale_x_continuous(name='Ano',expand=c(0,0),breaks=range_ano)+
        labs(title=titulo)+
        theme_bw()+theme(legend.position="bottom",panel.grid.minor.x = element_blank())
    pl
}

turn_dynamic=function(pl){return(ggplotly(pl) %>%
                                     layout(annotations = 
                                                list(x = 1, y = 0, text = fonte, 
                                                     showarrow = F, xref='paper',yref='paper',
                                                     xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                                     font=list(size=15, color="black"))
                                     ))}

###### Variáveis globais ######

fonte='Fonte: LabMA/UFRJ 2021'

dir='data/'

high_color='red'
low_color='blue'
social_distance='padding:15% 5px 15% 5px;'
text_distance='padding:10px 5px 10px 5px;'
table_distance='padding:50px 5px 50px 5px;'

cobertura_label=list('1'='Acidente','2'='Doença','3'='Qualquer causa')
get_cob_label=function(index){cobertura_label[[index]]}

valid_keys=c('be6847c5d89d58680cfb2a1d06d4b62200897c74b5dcfe8b0edd5b14af80759b',##digest('viewer_bbr_04707','sha256')
             "f97c56aa6471c8700b91bf1c5c2d797057aa6fd2751fabe4069bba2278e5c3e3"#digest('permissão_total','sha256')
             )

emp='ABC'#emp='BBR'
raw_cod_emp='01234'#raw_cod_emp='04707'
empresa_nome='Associação de Bancos Comerciais S/A'#empresa_nome='BRASILPREV SEGUROS E PREVIDÊNCIA S/A'
cod_emp=ifelse(nchar(raw_cod_emp)==4,paste0('0',raw_cod_emp),raw_cod_emp)
raw_cod_emp=as.character(as.numeric(cod_emp))

# Criando registro de usuários em mode de edição.
if(!dir.exists(paste0(dir,'textos/',str_to_upper(emp),'_',cod_emp))){
  dir.create(paste0(dir,'textos/',str_to_upper(emp),'_',cod_emp))
}
if(!file.exists(paste0(dir,'textos/',str_to_upper(emp),'_',cod_emp,'/edit_status.txt'))){
  file.create(paste0(dir,'textos/',str_to_upper(emp),'_',cod_emp,'/edit_status.txt'))
  saveData('livre',paste0(dir,'textos/',str_to_upper(emp),'_',cod_emp),'edit_status.txt')
}

ler_dados=function(name){read.csv2(paste0(name,'.csv'))}

# Eliminando notação científica
options(scipen = 9999)

filtra_data=function(data){
  data=data[data$COD_EMP==raw_cod_emp | data$COD_EMP==cod_emp,]
  data$COD_EMP=data$COD_EMP %>% as.factor
  data
}

raw_dados=read.csv2(paste0(dir,str_to_upper(emp),'_tabuas.csv'),stringsAsFactors = T) %>% filtra_data
raw_dados$ANO=raw_dados$ANO %>% as.factor

raw_estoques_geral=read.csv2(paste0(dir,str_to_upper(emp),'_estoques_geral.csv'),stringsAsFactors = T) %>% filtra_data
raw_estoques_registro=read.csv2(paste0(dir,str_to_upper(emp),'_estoques_registro.csv'),stringsAsFactors = T) %>% filtra_data
raw_coringas=read.csv2(paste0(dir,str_to_upper(emp),'_coringas.csv'),stringsAsFactors = T) %>% filtra_data
raw_critica=read.csv2(paste0(dir,str_to_upper(emp),'_critica.csv'),stringsAsFactors = F) %>% filtra_data
raw_critica=raw_critica[,-6] # Removendo a coluna do COD_EMP

raw_critica$SALDO_ESTOQUE=ifelse(is.na(raw_critica$SALDO_ESTOQUE),1,0)
raw_critica=aggregate(QTD~.,raw_critica,sum)

raw_obt_s_exp=read.csv2(paste0(dir,str_to_upper(emp),'_obt_sem_exp.csv'),stringsAsFactors = T) %>% filtra_data

anos_presentes <- unique(as.numeric(levels(raw_dados$ANO)))
dados_tratados=list(raw_dados,anos_presentes)
range_ano      <- c(min(anos_presentes):max(anos_presentes))

###### Importando BR-EMS ######
BR_EMS=list()
for(sexo in c('M','F')){
    for(ramo in c('MOR','SOB')){
        id_tabua=paste(paste0('BR-EMS',ifelse(ramo=='MOR','mt',ifelse(ramo=='SOB','sb','null')),'-v2015'),ifelse(sexo=='M','Masculina','Feminina'))
        BR_EMS_raw=read.csv(paste0(dir,'br_ems2015.csv'))
        BR_EMS[[paste(sexo,ramo,sep='_')]]=as.data.frame(matrix(0,121,3))
        names(BR_EMS[[paste(sexo,ramo,sep='_')]])=c('id_tabua','idade', 'Mx')
        BR_EMS[[paste(sexo,ramo,sep='_')]]$idade=c(1:121)
        BR_EMS[[paste(sexo,ramo,sep='_')]]$id_tabua=rep(id_tabua,121)
        BR_EMS[[paste(sexo,ramo,sep='_')]]$Mx=BR_EMS_raw[1:121,(2+ifelse(sexo=='M',0,2)+ifelse(ramo=='MOR',0,1))]
    }
}

for(sexo in c('M','F','unisex')){
    alvarovindas_raw=read.csv(paste0(dir,'alvarovindas.csv'),sep=';')
    alvarovindas=as.data.frame(matrix(0,121,3))
    names(alvarovindas)=c('id_tabua','idade', 'Mx')
    alvarovindas$idade=c(0:120)
    alvarovindas$id_tabua=rep('Álvaro Vindas',121)
    alvarovindas$Mx=alvarovindas_raw[,2]
    
    BR_EMS[[paste(sexo,'INV',sep='_')]]=alvarovindas
}

if(flag_2020){
    BR_EMS2020=list()
    for(sexo in c('M','F')){
        for(ramo in c('MOR','SOB')){
            id_tabua=paste(paste0('BR-EMS',ifelse(ramo=='MOR','mt',ifelse(ramo=='SOB','sb','null')),'-v2020'),ifelse(sexo=='M','Masculina','Feminina'))
            BR_EMS2020_raw=read.csv(paste0(dir,'br_ems2020.csv'))
            BR_EMS2020[[paste(sexo,ramo,sep='_')]]=as.data.frame(matrix(0,121,3))
            names(BR_EMS[[paste(sexo,ramo,sep='_')]])=c('id_tabua','idade', 'Mx')
            BR_EMS2020[[paste(sexo,ramo,sep='_')]]$idade=c(1:121)
            BR_EMS2020[[paste(sexo,ramo,sep='_')]]$id_tabua=rep(id_tabua,121)
            BR_EMS2020[[paste(sexo,ramo,sep='_')]]$Mx=BR_EMS2020_raw[1:121,(2+ifelse(sexo=='M',0,2)+ifelse(ramo=='MOR',0,1))]
        }
    }
}


###### Variáveis para o mapa ######
labels_uf=list(
    '-1'=' ',
    'RO'='Rondônia',
    'AC'='Acre',
    'AM'='Amazonas',
    'RR'='Roraima',
    'PA'='Pará',
    'AP'='Amapá',
    'TO'='Tocantins',
    'MA'='Maranhão',
    'PI'='Piauí',
    'CE'='Ceará',
    'RN'='Rio Grande do Norte',
    'PB'='Paraíba',
    'PE'='Pernambuco',
    'AL'='Alagoas',
    'SE'='Sergipe',
    'BA'='Bahia',
    'MG'='Minas Gerais',
    'ES'='Espírito Santo',
    'RJ'='Rio de Janeiro',
    'SP'='São Paulo',
    'PR'='Paraná',
    'SC'='Santa Catarina',
    'RS'='Rio Grande do Sul',
    'MS'='Mato Grosso do Sul',
    'MT'='Mato Grosso',
    'GO'='Goiás',
    'DF'='Distrito Federal'
)

get_uf=function(uf){labels_uf[[uf]]}

# O código comentado serve para criar as coordenadas dos mapas.
# De modo geral, não há necessidade de executar essa parte do código, mas deixo registrado aqui como foram gerados os mapas.
#
# library(sf)
# library(rnaturalearth)
# raw_map=ne_states(returnclass = "sf",country='BRAZIL')
# raw_map=raw_map[order(raw_map$name),]
# raw_map=as.data.frame(st_coordinates(raw_map))
# write.table(raw_region,'uf_coordinate_map.csv')
#
# devtools::install_github("rpradosiqueira/brazilmaps",force=T)
# library(brazilmaps)
# raw_region=get_brmap('Region')
# raw_region=raw_region[order(raw_region$desc_rg),]
# reg_name=sort(unique(raw_region$desc_rg))
# raw_region=as.data.frame(st_coordinates(raw_region))
# write.table(raw_region,'region_coordinate_map.csv')
#

raw_map=read.table(paste0(dir,'uf_coordinate_map.csv'))
raw_map=cbind(raw_map[,1:2],
          interaction(raw_map$L1,raw_map$L2,raw_map$L3),raw_map$L3)
names(raw_map)=c('X','Y','ID','Index')



raw_region=read.table(paste0(dir,'region_coordinate_map.csv'))
raw_region=cbind(raw_region[,1:2],
              interaction(raw_region$L1,raw_region$L2,raw_region$L3),raw_region$L3)
names(raw_region)=c('X','Y','ID','Index')

###### Server ######
shinyServer(function(input, output, session) {
    
    output$login=renderUI({
        showModal(modalDialog(
            inputId = "login_modal",
            title = tags$b("Login"),
            fluidRow(
                textInput('user','Usuário'),
                passwordInput('user_status','Chave de acesso'),style='padding:5px 5px 5px 5px;'),
            conditionalPanel('output.invalid_key',HTML('<p style="color:red">Chave de acesso inválida</p>')),
            footer=fluidRow(actionButton('check_id','Entrar'),align='right',style='padding:5px 5px 5px 5px;'),
            easyClose = F
        ))
        })
    
    onStop(function(){
        saveData('livre',paste0(dir,'textos/',paste0(emp,'_',cod_emp)),'edit_status.txt')
        })
    
    ###### Início ######
    
    # Os dados a seguir serão usador ao longo de todo o relatório e são atualizado automaticamente conforme a necessidade.
    
    dados          <- eventReactive(c(input$Cobertura,input$Classe),{
        if(input$Cobertura != 'INV'){
            if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
                dados=raw_dados[raw_dados$RAMO==input$Cobertura,]
            }else{
                dados=raw_dados[raw_dados$RAMO==input$Cobertura & raw_dados$TIPO=='PRODUTO' & raw_dados$CLASSE==input$Classe,]
            }
        }else{
            dados=raw_dados[raw_dados$RAMO==input$Cobertura & raw_dados$TIPO=='COBERTURA',]
        }
        
        dados$Mx_DATAPREV=ifelse(dados$EXP>0,dados$OBT/dados$EXP,0)
        dados$Mx=ifelse(dados$EXP>0,dados$OBT_EMPRESA/dados$EXP,0)
        return(dados)
    })
    reac_val=reactiveValues(act_map=matrix(0,0,0),uf_map=rep(F,27),region_map=rep(F,5),tab_name='intro',edit_mode=0)
    
    estoques_list=eventReactive(c(input$Cobertura,input$Classe),{
        estoques=raw_estoques_geral
        
        names(estoques)=c('COD_EMP','RAMO','ANO','CLASSE','Estoque_inicial','Entradas','Estoque_final','Saídas')
        estoques$ANO=as.numeric(estoques$ANO)
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
            estoques=estoques[estoques$RAMO==input$Cobertura &
                                  estoques$ANO %in% range_ano,
                              3:8]
        }else{
            estoques=estoques[estoques$RAMO==input$Cobertura &
                                  estoques$ANO %in% range_ano &
                                  estoques$CLASSE==input$Classe,
                              3:8]
        }
        
        estoques=cbind(estoques$ANO,estoques$CLASSE,stack(estoques,select=-c(ANO,CLASSE)))
        names(estoques)=c('ANO','CLASSE','Valores','Estatística')
        estoques_agrupado=as.data.frame(matrix(0,0,3))
        names(estoques_agrupado)=c('ANO','Valores','Estatística')
        for(stat in c('Estoque_inicial','Entradas','Estoque_final','Saídas')){
            for(ano in range_ano){
                line=as.data.frame(t(c(ano,sum(estoques[estoques$ANO==ano & estoques$Estatística==stat,3]),stat)))
                names(line)=c('ANO','Valores','Estatística')
                estoques_agrupado=rbind(estoques_agrupado,line)
            }
        }
        estoques_agrupado$ANO=as.numeric(estoques_agrupado$ANO)
        estoques_agrupado$Valores=as.numeric(estoques_agrupado$Valores)
        estoques_agrupado$Estatística=factor(estoques_agrupado$Estatística,
                                             levels=c('Estoque_inicial','Entradas','Estoque_final','Saídas'))
        
        list(estoques,estoques_agrupado)
        })
    estoques_prod=eventReactive(c(input$Cobertura,input$Classe),{
        estoques=raw_estoques_geral
        
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
            estoques=estoques[estoques$RAMO==input$Cobertura &
                                  estoques$ANO %in% range_ano,
                              3:8]
        }else{
            estoques=estoques[estoques$RAMO==input$Cobertura &
                                  estoques$ANO %in% range_ano &
                                  estoques$CLASSE==input$Classe,
                              3:8]
        }
        for(classe in unique(estoques$CLASSE)){
            for(ano in range_ano){
                if(!(classe %in% unique(estoques$CLASSE[estoques$ANO==ano]))){
                    estoques=rbind(estoques,
                                   list(ANO=ano,CLASSE=classe,ESTOQUE_INICIAL=0,ENTRADAS=0,ESTOQUE_FINAL=0,SAIDAS=0))
                }
            }
        }
        names(estoques)=c('ANO','CLASSE','Estoque_inicial','Entradas','Estoque_final','Saídas')
        if(input$Cobertura=='INV'){
            estoques$CLASSE=as.character(estoques$CLASSE)
            estoques$CLASSE=sapply(estoques$CLASSE,get_cob_label)
            estoques$CLASSE=as.factor(estoques$CLASSE)
        }
        
        for(i in c(range_ano)){
            estoques[estoques$ANO==i,3:5]=estoques[estoques$ANO==i,3:4]/sum(estoques[estoques$ANO==i,3:4])
            estoques[estoques$ANO==i,6]=estoques[estoques$ANO==i,6]/sum(estoques[estoques$ANO==i,6])
        }
        estoques=estoques[order(estoques[['CLASSE']],estoques[['ANO']]),1:6]
        
        estoques=cbind(estoques,estoques$Estoque_inicial+estoques$Entradas)
        names(estoques)=c('ANO','CLASSE','Estoque_inicial','Entradas','Estoque_final','Saídas','Ativos')
        estoques
    })
    
    estoques_registro=eventReactive(c(input$Cobertura,input$Classe),{
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
            estoques=raw_estoques_registro[raw_estoques_registro$RAMO==input$Cobertura,
                                           c(4,5,6)]
        }else{
            estoques=raw_estoques_registro[raw_estoques_registro$RAMO==input$Cobertura &
                                           raw_estoques_registro$CLASSE==input$Classe,
                                           c(4,5,6)]
        }
        
        estoques$SALDO=ifelse(estoques$SALDO==0,0,ifelse(estoques$SALDO>0,1,-1))
        estoques=aggregate(TOTAL_REGISTROS~.,estoques,sum)
        return(estoques)
    })
    estoques_registro_data=table_data=eventReactive(c(input$Cobertura,input$Classe),{
        table_data=spread(estoques_registro(),SALDO,TOTAL_REGISTROS)
        table_data$REF_INFO=as.character(table_data$REF_INFO)
        
        saldo_negativo=c(table_data[['-1']],sum(table_data[['-1']]))
        saldo_nulo=c(table_data[['0']],sum(table_data[['0']]))
        saldo_positivo=c(table_data[['1']],sum(table_data[['1']]))
        anos=c(table_data$REF_INFO,'Total')
        total=saldo_negativo+saldo_nulo+saldo_positivo
        total=ifelse(total==0,1,total)
        perc_neg=saldo_negativo/total
        perc_pos=saldo_positivo/total
        table_data=data.frame(anos,saldo_negativo,perc_neg,saldo_positivo,perc_pos)
        
        table_data
    })
    
    obt_sem_exp_data=eventReactive(c(input$Cobertura,input$Classe),{
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
            obts=raw_obt_s_exp[raw_obt_s_exp$RAMO==input$Cobertura &
                               raw_obt_s_exp$CLASSE==input$Cobertura,
                                           c(4,5,6)]
        }else{
            obts=raw_obt_s_exp[raw_obt_s_exp$RAMO==input$Cobertura &
                                   raw_obt_s_exp$CLASSE==input$Classe,
                                           c(4,5,6)]
        }
        
        obts=spread(obts,FLAG_OBT_S_EXP,TOTAL_REGISTROS,fill=0)
        names(obts)=c('Ano','c_exp','s_exp')
        total=(obts[['c_exp']]+obts[['s_exp']])
        total=ifelse(total==0,1,total)
        obts$perc=obts[['s_exp']]/total
        obts$perc2=obts[['c_exp']]/total
        return(obts)
    })
    
    raw_GI=eventReactive(input$Cobertura,{
        imported_GI=dados()[dados()$TIPO=='GI',c(2,5,8)]
        
        imported_GI$CLASSE[imported_GI$CLASSE %in% c('-1','0')]=0
        imported_GI$CLASSE[imported_GI$CLASSE %in% c('1','2','3','4','5','6','10')]=1
        imported_GI$CLASSE[imported_GI$CLASSE %in% c('7','8')]=2
        imported_GI$CLASSE[imported_GI$CLASSE %in% c('9','11','12','13')]=3
        
        imported_GI=aggregate(INDV~.,imported_GI,sum)
        names(imported_GI)=c("REF_INFO","GI","QTD" )
        imported_GI
    })
    
    observeEvent(input$select_loc,{
        reac_val$uf_map=rep(T,27)
    })
    observeEvent(input$unselect_loc,{
        reac_val$uf_map=rep(F,27)
    })
    observeEvent(input$select_region,{
        reac_val$region_map=rep(T,5)
    })
    observeEvent(input$unselect_region,{
        reac_val$region_map=rep(F,5)
    })
    
    pop_name=eventReactive(c(input$Cobertura,input$Classe),{
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
            paste('na cobertura de',ifelse(input$Cobertura=='MOR','morte',ifelse(input$Cobertura=='SOB','sobrevivência','invalidez')))
        }else{
            if(input$Cobertura!='INV'){
                paste('no produto',input$Classe)
            }else{
                paste('na cobertura de',get_cob_label(input$Classe))
                }
        }
    })
    
    filtragem_data=eventReactive(c(input$Cobertura,input$Classe),{
        data=read.csv2(paste0(dir,'vv_',emp,'.csv'))
        data=data[data$GRUPO==emp & data$COD_EMP==raw_cod_emp & data$COBERTURA==input$Cobertura,]
        
        produtos=unique(data$PRODUTO)
        
        data=data[order(data$PRODUTO,data$SEXO),]
        data$PRODUTO[data$PRODUTO=='PP']='PPT'
        
        resultado_exclusao=ifelse(data$MOTIVO_EXCLUSAO==0,'OK','Rejeitado')
        
        data=cbind(data,resultado_exclusao)
        data$MOTIVO_EXCLUSAO=ifelse(data$MOTIVO_EXCLUSAO==0,'OK',data$MOTIVO_EXCLUSAO)
        return(data)
    })
    pop_data=eventReactive(c(input$Cobertura,input$Classe),{
        if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
        dados()[dados()$TIPO=='COBERTURA' & dados()$CLASSE==input$Cobertura,]
        }else{
            if(ifelse(is.null(input$Cobertura),'MOR',input$Cobertura)!='INV'){
                dados()[dados()$TIPO=='PRODUTO' & dados()$CLASSE==input$Classe,]
            }else{
                dados()[dados()$TIPO=='COBERTURA' & dados()$CLASSE==input$Classe,]
            }
        }
    })
    GI_data=eventReactive(input$Cobertura,{
        tabua=dados()[dados()$TIPO=='GI' & dados()$ANO %in% c(2013:2017),c(5,6,7,8,9,10)]
        tabua$CLASSE=as.character(tabua$CLASSE)
        
        tabua$CLASSE[tabua$CLASSE %in% c('-1','0')]='Não informado'
        tabua$CLASSE[tabua$CLASSE %in% c('1','2','3','4','5','6','10')]='Sem ensino médio'
        tabua$CLASSE[tabua$CLASSE %in% c('7','8')]='Com ensino médio'
        tabua$CLASSE[tabua$CLASSE %in% c('9','11','12','13')]='Com ensino superior'

        tabua=merge(aggregate(EXP~.,tabua[,c(-4,-6)],sum),aggregate(OBT~.,tabua[,c(-4,-5)],sum),by=c('CLASSE','SEXO','IDADE'))
        tabua$Mx=ifelse(tabua$EXP>0,tabua$OBT/tabua$EXP,0)
        
        tabua[order(tabua$CLASSE,tabua$SEXO,tabua$IDADE),]
        })
    
    loc_data=eventReactive(c(input$Cobertura,input$ano_loc),{
        raw_tabua=dados()[dados()$TIPO=='UF' & dados()$ANO %in% c(min(input$ano_loc):max(input$ano_loc)),c(5,8,9,10)]
        
        tabua=merge(aggregate(INDV~.,raw_tabua[,c(-3,-4)],sum),aggregate(EXP~.,raw_tabua[,c(-2,-4)],sum),by='CLASSE')
        tabua=merge(tabua,aggregate(OBT~.,raw_tabua[,c(-2,-3)],sum),by='CLASSE')
        tabua$Mx=ifelse(tabua$EXP>0,tabua$OBT/tabua$EXP,0)
        tabua$CLASSE=as.character(tabua$CLASSE)
        tabua$CLASSE=sapply(tabua$CLASSE,get_uf)
        tabua=tabua[order(tabua$CLASSE,na.last = T),]
        
        tabua_null=tabua[tabua$CLASSE==' ',]
        tabua_uf=tabua[tabua$CLASSE!=' ',]
        list(UF=tabua_uf,null=tabua_null)
    })
    loc_data_idade=eventReactive(c(input$Cobertura,input$ano_loc,reac_val$uf_map),{
        raw_tabua=dados()[dados()$TIPO=='UF' & dados()$ANO %in% c(min(input$ano_loc):max(input$ano_loc)),c(5,6,7,8,9,10)]
        
        tabua=merge(aggregate(INDV~.,raw_tabua[,c(-5,-6)],sum),aggregate(EXP~.,raw_tabua[,c(-4,-6)],sum),by=c('CLASSE','SEXO','IDADE'))
        tabua=merge(tabua,aggregate(OBT~.,raw_tabua[,c(-4,-5)],sum),by=c('CLASSE','SEXO','IDADE'))
        tabua$Mx=ifelse(tabua$EXP>0,tabua$OBT/tabua$EXP,0)
        tabua$CLASSE=as.character(tabua$CLASSE)
        tabua$CLASSE=sapply(tabua$CLASSE,get_uf)
        tabua=tabua[order(tabua$CLASSE,na.last = T),]
        
        tabua_uf=tabua[tabua$CLASSE %in% loc_data()[['UF']]$CLASSE[reac_val$uf_map],]
        tabua_uf
    })
    region_data=eventReactive(c(input$Cobertura,input$ano_region),{
        raw_tabua=dados()[dados()$TIPO=='UF' & dados()$ANO %in% c(min(input$ano_region):max(input$ano_region)),c(5,8,9,10)]
        
        raw_tabua$CLASSE=as.character(raw_tabua$CLASSE)
        
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('AC','AM','RO','RR','PA','AP','TO')]='Norte'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MA','PI','BA','CE','PE','SE','AL','PB','RN')]='Nordeste'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MG','SP','RJ','ES')]='Sudeste'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('PR','SC','RS')]='Sul'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MT','MS','GO','DF')]='Centro-oeste'
        
        tabua=merge(aggregate(INDV~.,raw_tabua[,c(-3,-4)],sum),aggregate(EXP~.,raw_tabua[,c(-2,-4)],sum),by='CLASSE')
        tabua=merge(tabua,aggregate(OBT~.,raw_tabua[,c(-2,-3)],sum),by='CLASSE')
        tabua$Mx=ifelse(tabua$EXP>0,tabua$OBT/tabua$EXP,0)
        
        tabua=tabua[order(tabua$CLASSE,na.last = T),]
        
        tabua_null=tabua[tabua$CLASSE=='-1',]
        tabua_uf=tabua[tabua$CLASSE!='-1',]
        list(UF=tabua_uf,null=tabua_null)
    })
    region_data_idade=eventReactive(c(input$Cobertura,input$ano_region,reac_val$region_map),{
        raw_tabua=dados()[dados()$TIPO=='UF' & dados()$ANO %in% c(min(input$ano_region):max(input$ano_region)),c(5,6,7,8,9,10)]
        raw_tabua$CLASSE=as.character(raw_tabua$CLASSE)
            
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('AC','AM','RO','RR','PA','AP','TO')]='Norte'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MA','PI','BA','CE','PE','SE','AL','PB','RN')]='Nordeste'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MG','SP','RJ','ES')]='Sudeste'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('PR','SC','RS')]='Sul'
        raw_tabua$CLASSE[raw_tabua$CLASSE %in% c('MT','MS','GO','DF')]='Centro-oeste'
        
        tabua=merge(aggregate(INDV~.,raw_tabua[,c(-5,-6)],sum),aggregate(EXP~.,raw_tabua[,c(-4,-6)],sum),by=c('CLASSE','SEXO','IDADE'))
        tabua=merge(tabua,aggregate(OBT~.,raw_tabua[,c(-4,-5)],sum),by=c('CLASSE','SEXO','IDADE'))
        tabua$Mx=ifelse(tabua$EXP>0,tabua$OBT/tabua$EXP,0)
        tabua$CLASSE=as.character(tabua$CLASSE)
        tabua=tabua[order(tabua$CLASSE,na.last = T),]
        
        tabua_uf=tabua[tabua$CLASSE %in% region_data()[['UF']]$CLASSE[reac_val$region_map],]
        tabua_uf
    })
    
    observeEvent(input$tabela_filtragem_individuos_cell_clicked,{
        coord=input$tabela_filtragem_individuos_cell_clicked
        if(!(is.null(coord$col))){
            if(coord$col<2){
                if(all(reac_val$act_map[coord$row,])){
                    reac_val$act_map[coord$row,]=F
                }else{
                    reac_val$act_map[coord$row,]=T
                }
            }else{
                reac_val$act_map[coord$row,(coord$col-1)]=!(reac_val$act_map[coord$row,(coord$col-1)])
            }
        }
    })
    observeEvent(input$tabela_filtragem_exposicao_cell_clicked,{
        coord=input$tabela_filtragem_exposicao_cell_clicked
        if(!(is.null(coord$col))){
            if(coord$col<2){
                if(all(reac_val$act_map[coord$row,])){
                    reac_val$act_map[coord$row,]=F
                }else{
                    reac_val$act_map[coord$row,]=T
                }
            }else{
                reac_val$act_map[coord$row,(coord$col-1)]=!(reac_val$act_map[coord$row,(coord$col-1)])
            }
        }
    })
    observeEvent(input$tabela_filtragem_obitos_cell_clicked,{
        coord=input$tabela_filtragem_obitos_cell_clicked
        if(!(is.null(coord$col))){
            if(coord$col<2){
                if(all(reac_val$act_map[coord$row,])){
                    reac_val$act_map[coord$row,]=F
                }else{
                    reac_val$act_map[coord$row,]=T
                }
            }else{
                reac_val$act_map[coord$row,(coord$col-1)]=!(reac_val$act_map[coord$row,(coord$col-1)])
            }
        }
    })
    observeEvent(input$tabela_filtragem_motivo_cell_clicked,{
        coord=input$tabela_filtragem_motivo_cell_clicked
        if(!(is.null(coord$col))){
            if(coord$col<2){
                if(all(reac_val$act_map[coord$row,])){
                    reac_val$act_map[coord$row,]=F
                }else{
                    reac_val$act_map[coord$row,]=T
                }
            }else{
                reac_val$act_map[coord$row,(coord$col-1)]=!(reac_val$act_map[coord$row,(coord$col-1)])
            }
        }
    })
    
    observeEvent(c(input$Cobertura,input$Classe),{
                       reac_val$act_map=matrix(F,length(unique(interaction(filtragem_data()$PRODUTO,filtragem_data()$SEXO))),
                                               length(unique(filtragem_data()$ANO)))    
                   })
    
    col_data=eventReactive(c(input$Cobertura,
                             input$Classe,
                             input$tabela_filtragem_motivo_cell_clicked,
                             input$tabela_filtragem_individuos_cell_clicked,
                             input$tabela_filtragem_exposicao_cell_clicked,
                             input$tabela_filtragem_obitos_cell_clicked),{
        col_data=spread(filtragem_data()[,c(1,4,5,11)],
               'ANO','resultado_exclusao',fill='')
        id_col=col_data[,1:2]
        mat_col=as.matrix(col_data[,3:length(col_data)])
        if(!all(dim(reac_val$act_map)==c(length(unique(interaction(filtragem_data()$PRODUTO,filtragem_data()$SEXO))),
                                        length(unique(filtragem_data()$ANO))))){
            reac_val$act_map=matrix(F,length(unique(interaction(filtragem_data()$PRODUTO,filtragem_data()$SEXO))),
                                    length(unique(filtragem_data()$ANO)))
        }
        mat_col=ifelse(mat_col!='' & reac_val$act_map,paste0(mat_col,'_selected'),mat_col)
        col_data=cbind(id_col,mat_col)
        col_data
    })
    
    fil_data=eventReactive(c(input$Cobertura,input$Classe),{
        spread(filtragem_data()[,c(1,4,5,10)],
               'ANO','MOTIVO_EXCLUSAO',fill='')
    })
    indv_data=eventReactive(c(input$Cobertura,input$Classe),{
        expo=aggregate(INDV~.,dados()[dados()$TIPO=='PRODUTO',c(2,5,6,8)],
                       sum)
        names(expo)=c('ANO','PRODUTO','SEXO','INDV')
        expo$PRODUTO=as.character(expo$PRODUTO)
        
        pre_data=filtragem_data()[,c(1,4,5)]
        names(pre_data)=c('ANO','PRODUTO','SEXO')
        
        pre_data=merge(pre_data,expo,by=c('PRODUTO','SEXO','ANO'))
        pre_data$INDV=set_format(round(pre_data$INDV))
        pre_data=pre_data[order(pre_data$PRODUTO,pre_data$SEXO),]
        data=spread(pre_data,
                    'ANO','INDV')
        return(data)
    })
    exp_data=eventReactive(c(input$Cobertura,input$Classe),{
        expo=aggregate(EXP~.,dados()[dados()$TIPO=='PRODUTO',c(2,5,6,9)],
                             sum)
        names(expo)=c('ANO','PRODUTO','SEXO','EXP')
        expo$PRODUTO=as.character(expo$PRODUTO)
        
        pre_data=filtragem_data()[,c(1,4,5)]
        names(pre_data)=c('ANO','PRODUTO','SEXO')

        pre_data=merge(pre_data,expo,by=c('PRODUTO','SEXO','ANO'))
        pre_data$EXP=set_format(round(pre_data$EXP))
        pre_data=pre_data[order(pre_data$PRODUTO,pre_data$SEXO),]
        data=spread(pre_data,
               'ANO','EXP')
        return(data)
    })
    obt_data=eventReactive(c(input$Cobertura,input$Classe),{
        
        expo=aggregate(OBT~.,dados()[dados()$TIPO=='PRODUTO',c(2,5,6,10)],
                       sum)
        
        names(expo)=c('ANO','PRODUTO','SEXO','OBT')
        expo$PRODUTO=as.character(expo$PRODUTO)
        pre_data=filtragem_data()[,c(1,4,5)]
        names(pre_data)=c('ANO','PRODUTO','SEXO')
        
        pre_data=merge(pre_data[1:3],expo,by=c('PRODUTO','SEXO','ANO'))
        
        pre_data=pre_data[order(pre_data$PRODUTO,pre_data$SEXO),]
        
        pre_data$OBT=set_format(round(pre_data$OBT))
        data=spread(pre_data,
                    'ANO','OBT')
        return(data)
    })
    
    ###### Criando plots ######
    {
        ######### Filtragem #########
        output$plot_filtragem <- renderPlot({
            data_filtragem=raw_critica
            
            if(input$Cobertura != 'INV'){
                if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
                    data_filtragem=data_filtragem[data_filtragem$COBERTURA==input$Cobertura,c(1,4,5)]
                }else{
                    data_filtragem=data_filtragem[data_filtragem$COBERTURA==input$Cobertura & data_filtragem$PRODUTO==input$Classe,c(1,4,5)]
                }
            }else{
                data_filtragem=data_filtragem[data_filtragem$COBERTURA==input$Cobertura,c(1,4,5)]
            }
            data_filtragem=rbind(data_filtragem,c(2019,1,0))
            for(ano in range_ano){
                if(!(ano %in% data_filtragem$ANO)){
                    data_filtragem=rbind(data_filtragem,c(ano,1,0))
                }
            }
            data_filtragem=aggregate(QTD~.,data_filtragem,sum)
            data_filtragem=spread(data_filtragem,'SALDO_ESTOQUE','QTD',fill=0)
            names(data_filtragem)=c('Ano','Aceitos','Rejeitados')
            
            data_filtragem[["Percentual de aceitos"]]=data_filtragem$Aceitos/(data_filtragem$Aceitos+data_filtragem$Rejeitados)
            
            maximos=calcula_max(max(max(data_filtragem$Aceitos),max(data_filtragem$Rejeitados)))
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            
            razao=data_filtragem[["Percentual de aceitos"]]
            razao=ifelse(razao==0,NA,razao)
            
            maximum=max(razao)
            
            maximos=calcula_max(1)
            razao_value=0.1
            razao_interval_size=11
            razao_max_value=1.1
            
            y_razao=(razao)*max_value/razao_max_value
            y_razao=if(sum(!(is.na(y_razao)))==0){ifelse(is.na(y_razao),-1,y_razao)}else{y_razao}
            
            pl=ggplot()+
                geom_bar(aes(x=c(data_filtragem$Ano,data_filtragem$Ano),y=c(data_filtragem$Aceitos,data_filtragem$Rejeitados),fill=c(rep('Aceitos',16),rep('Rejeitados',16))),stat='identity',position=position_stack())+
                geom_point(aes(x=data_filtragem$Ano,y=y_razao,color='Percentual de aceitos',shape='Percentual de aceitos'))+
                geom_line(aes(x=data_filtragem$Ano,
                              y=y_razao,
                              color='Percentual de aceitos'))+
                geom_label(aes(x=data_filtragem$Ano,
                               y=y_razao,
                               label=paste0((((razao)*10000)%/%1)/100,'%')),nudge_y=max_value/20,size=4)+
                scale_shape(name='')+
                scale_fill_discrete('')+
                scale_color_manual(name='',values='black')+
                scale_x_continuous('Ano', breaks=data_filtragem$Ano,limits=c(min(data_filtragem$Ano)-0.5,max(data_filtragem$Ano)+0.5))+
                scale_y_continuous(name='Quantidade de registros',
                                   breaks=c(0:interval_size)*value,expand=c(0,0),
                                   labels=set_format(c(0:interval_size)*value),
                                   sec.axis = sec_axis(~ . / (max_value/razao_max_value),
                                                       breaks=c(0:razao_interval_size)*razao_value,
                                                       labels=paste0((((c(0:razao_interval_size)*razao_value)*10000)%/%1)/100,'%')))+
                labs(title=paste('Quantidade de registros filtrados na critica inicial\n',pop_name()),caption=fonte)+
                coord_cartesian(ylim = c(0,interval_size)*value)+
                guides(linetype = 'none')+theme_bw()+theme_setup+theme(legend.position='bottom')
            pl
        },height = 600, width = 800)
        
        ######### Estoques #########
        output$plot_estoques <- renderPlot({
            estoques_agrupado=estoques_list()[[2]]
            pre_max=max(c(estoques_agrupado$Valores[estoques_agrupado$Estatística=='Estoque_inicial']+estoques_agrupado$Valores[estoques_agrupado$Estatística=='Entradas'],estoques_agrupado$Valores[estoques_agrupado$Estatística=='Estoque_final']+estoques_agrupado$Valores[estoques_agrupado$Estatística=='Saídas']))
            
            maximos=calcula_max(pre_max)
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            pl=ggplot(estoques_agrupado)+
                geom_bar(aes(x=ifelse(Estatística %in% c("Estoque_inicial","Entradas"),'1','2'),y=Valores,fill=Estatística),stat='identity')+
                scale_y_continuous(name='Quantidade de registros',
                                   limits=c(0,max_value),
                                   expand=c(0,0),
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                scale_fill_hue('',labels=c('Estoque inicial','Entrada','Estoque final','Saída'))+
                scale_x_discrete('',breaks=c())+
                facet_wrap(~ANO,nrow=1,strip.position='bottom')+
                labs(title=paste('Evolução anual da igualdade entre registros de início\ne fim de exposição',pop_name()),caption=fonte)+
                theme_classic()+theme_setup+theme(legend.position="bottom")
            pl
            },height = 600, width = 800)
        output$table_estoques <- eventReactive(c(input$Cobertura,input$Classe),{
            table_data=unstack(estoques_list()[[2]],Valores~Estatística)
            row.names(table_data)=range_ano
            table_data$Saldo=table_data$Estoque_inicial+table_data$Entradas-table_data$Estoque_final-table_data$Saídas
            
            table_data$Estoque_inicial=set_format(table_data$Estoque_inicial)
            table_data$Entradas=set_format(table_data$Entradas)
            table_data$Estoque_final=set_format(table_data$Estoque_final)
            table_data$Saídas=set_format(table_data$Saídas)
            table_data$Saldo=set_format(table_data$Saldo)
            
            names(table_data)=c('Estoque Inicial',
                                'Entradas',
                                'Estoque final',
                                'Saídas',
                                'Saldo')
            
            kbl(t(table_data),format="html", align = "c", booktabs=T,escape=F) %>%
                column_spec(1,bold = T) %>%
                row_spec(4,hline_after=T) %>%
                row_spec(5, bold = T,hline_after=T) %>%
                kable_styling(position = "center")
        })
        output$plot_estoques_registro <- renderPlot({
            table_data=estoques_registro_data()
            table_data=table_data[table_data$anos!='Total',]
            table_data$anos=as.factor(table_data$anos)
    
            maximos=calcula_max(c(table_data$saldo_positivo,table_data$saldo_negativo))
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            maximos=calcula_max(c(table_data$perc_pos,table_data$perc_neg))
            razao_value=maximos[[1]]
            razao_interval_size=maximos[[2]]
            razao_max_value=maximos[[3]]
            
            table_data$perc_pos=(table_data$perc_pos)*max_value/razao_max_value
            table_data$perc_neg=(table_data$perc_neg)*max_value/razao_max_value
            
            table_data=table_data[order(table_data$anos),]
            
            pl=ggplot(table_data)+
                geom_bar(aes(x=anos,y=saldo_positivo,fill='Sem fim de exposição'),stat='identity')+
                geom_bar(aes(x=anos,y=(-1)*saldo_negativo,fill='Sem início de exposição'),stat='identity')+
                geom_point(aes(x=anos,y=perc_pos,color='Percentual'))+
                geom_line(aes(x=anos,
                              y=perc_pos,
                              color='Percentual',group='1'),linetype='solid')+
                geom_point(aes(x=anos,y=-perc_neg,color='Percentual'))+
                geom_line(aes(x=anos,
                              y=-perc_neg,
                              color='Percentual',group='2'),linetype='solid')+
                scale_y_continuous(name='Quantidade de registros',
                                   limits=c(-max_value,max_value),
                                   expand=c(0,0),
                                   breaks=c(-interval_size:interval_size)*value,
                                   labels=set_format(abs(c(-interval_size:interval_size))*value),
                                   sec.axis = sec_axis(~ . / (max_value/razao_max_value),
                                                       breaks=c(-razao_interval_size:razao_interval_size)*razao_value,
                                                       labels=paste0((((abs(c(-razao_interval_size:razao_interval_size))*razao_value)*10000)%/%1)/100,'%')))+
                geom_hline(yintercept = 0)+
                scale_fill_hue('')+
                scale_color_manual('',values='black')+
                scale_x_discrete('Anos')+
                labs(title=paste('Registros com informação faltante sobre exposição\n',pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position="bottom")
            pl
        },height = 600, width = 800)
        output$table_estoques_registro <- eventReactive(c(input$Cobertura,input$Classe),{
            table_data=estoques_registro_data()
    
            table_data$perc_neg=(100*table_data$perc_neg) %>% round(digits = 2) %>% format(nsmall = 2) %>% paste0('%')
            table_data$perc_pos=(100*table_data$perc_pos) %>% round(digits = 2) %>% format(nsmall = 2) %>% paste0('%')
            table_data$saldo_negativo=table_data$saldo_negativo %>% set_format
            table_data$saldo_positivo=table_data$saldo_positivo %>% set_format
            table_data=rbind(c('Ano','Quantidade','%','Quantidade','%'),table_data)
            kbl(table_data,format="html", align = "r",escape=F,col.names=NULL)%>%
                kable_material_dark()%>%
                column_spec(1,bold = T,border_left =T,border_right =T) %>%
                add_header_above(.,
                                 c('Ano'=1,
                                   'Registros sem início\nde exposição'=2,'Registros sem fim\nde exposição'=2),
                                 escape = TRUE,
                                 bold=T,
                                 extra_css = "border: 1px solid;") %>%
                column_spec(c(3,5),border_right =T,border_left =T, extra_css = "border-right: 1px solid; border-left: 1px dashed;") %>%
                row_spec(length(table_data$anos)-1,hline_after=T) %>%
                row_spec(c(1,length(table_data$anos)), bold = T,hline_after=T, extra_css = "border-bottom: 1px solid; border-top: 3px double;") %>%
                collapse_rows(columns = 1,valign = 'middle')%>%
                kable_styling(position = "center",full_width = F)
        })
        output$plot_obs_s_exp <- renderPlot({
            table_data=obt_sem_exp_data()
            
            maximos=calcula_max(ifelse(max(table_data[['s_exp']])==0,1,max(table_data[['s_exp']])))
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            maximos=calcula_max(ifelse(max(table_data$perc)==0,1,max(table_data$perc)))
            razao_value=maximos[[1]]
            razao_interval_size=maximos[[2]]
            razao_max_value=maximos[[3]]
            
            table_data$perc=(table_data$perc)*max_value/razao_max_value
            
            pl=ggplot(table_data)+
                geom_bar(aes(x=Ano,y=s_exp,fill=paste0(ifelse(input$Cobertura=='INV','Entradas em invalidez','Óbitos'),' sem exposição')),stat='identity')+
                geom_point(aes(x=Ano,y=perc,color='Percentual do total'))+
                geom_line(aes(x=Ano,
                              y=perc,
                              color='Percentual do total',group='1'),linetype='solid')+
                scale_y_continuous(name='Quantidade de registros',
                                   limits=c(0,max_value),
                                   expand=c(0,0),
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(abs(c(0:interval_size))*value),
                                   sec.axis = sec_axis(~ . / (max_value/razao_max_value),
                                                       breaks=c(0:razao_interval_size)*razao_value,
                                                       labels=paste0((((abs(c(0:razao_interval_size))*razao_value)*10000)%/%1)/100,'%')))+
                geom_hline(yintercept = 0)+
                scale_fill_hue('')+
                scale_color_manual('',values='black')+
                scale_x_discrete('Anos')+
                labs(title=paste0('Registros de ',ifelse(input$Cobertura=='INV','entradas em invalidez','óbitos'),' sem exposição\n',pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position="bottom")
            pl
        },height = 600, width = 800)
        output$table_obs_s_exp <- eventReactive(c(input$Cobertura,input$Classe),{
            table_data=obt_sem_exp_data()
            total=sum(table_data$c_exp+table_data$s_exp)
            total=ifelse(total==0,1,total)
            
            table_data=rbind(table_data,c(999999,
              sum(table_data$c_exp),
              sum(table_data$s_exp),
              sum(table_data$s_exp)/total,
              sum(table_data$c_exp)/total))
            table_data$Ano[table_data$Ano==999999]='Total'
            
            
            table_data$perc=(100*table_data$perc) %>% round(digits = 2) %>% format(nsmall = 2) %>% paste0('%')
            table_data$perc2=(100*table_data$perc2) %>% round(digits = 2) %>% format(nsmall = 2) %>% paste0('%')
            table_data$c_exp=table_data$c_exp %>% set_format
            table_data$s_exp=table_data$s_exp %>% set_format
            
            table_data=table_data[,c(1,2,5,3,4)]
            table_data=rbind(c('Ano','Quantidade','%','Quantidade','%'),
                             table_data)
            
            if(input$Cobertura=='INV'){
                evento=c('Ano'=1,
                  'Entradas em invalidez\ncom exposição'=2,'Entradas em invalidez\nsem exposição'=2)
            }else{
                evento=c('Ano'=1,
                         'Óbitos com exposição'=2,'Óbitos sem exposição'=2)
            }
            
            kbl(table_data,format="html", align = "r",escape=F,col.names=NULL)%>%
                kable_material_dark()%>%
                column_spec(1,bold = T,border_left =T,border_right =T) %>%
                add_header_above(.,
                                 evento,
                                 escape = TRUE,
                                 bold=T,
                                 extra_css = "border: 1px solid;") %>%
                column_spec(c(3,5),border_right =T,border_left =T, extra_css = "border-right: 1px solid; border-left: 1px dashed;") %>%
                row_spec(length(table_data$Ano)-1,hline_after=T) %>%
                row_spec(c(1,length(table_data$Ano)), bold = T,hline_after=T, extra_css = "border-bottom: 1px solid; border-top: 3px double;") %>%
                collapse_rows(columns = 1,valign = 'middle')%>%
                kable_styling(position = "center",full_width = F)
        })
        output$plot_estoques_inicio_fim <- renderPlot({
            estoques_agrupado=estoques_list()[[2]]
            estoques_agrupado[estoques_agrupado$Estatística=='Estoque_inicial',1]=estoques_agrupado[estoques_agrupado$Estatística=='Estoque_inicial',1]-1
            estoques_agrupado=estoques_agrupado[estoques_agrupado$ANO %in% range_ano[-length(range_ano)] & estoques_agrupado$Estatística %in% c('Estoque_inicial','Estoque_final'),1:3]
            estoques_agrupado$Estatística=factor(estoques_agrupado$Estatística,levels=c('Estoque_final','Estoque_inicial'))
        
            pre_max=max(estoques_agrupado$Valores[estoques_agrupado$Estatística %in% c('Estoque_inicial','Estoque_final')])
        
            maximos=calcula_max(pre_max)
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            pl=ggplot(estoques_agrupado)+
                geom_bar(aes(x=ANO,y=Valores,fill=Estatística,group=Estatística),stat='identity',position=position_dodge())+
                scale_y_continuous(name='Quantidade de registros',limits=c(0,max_value),expand=c(0,0),
                                   breaks=c(0:interval_size)*value,labels=set_format(c(0:interval_size)*value))+
                scale_fill_manual('',labels=c('Estoque final no ano de referência','Estoque inicial no ano seguinte'),values=c('#00BFC4','#F8766D'))+
                scale_x_continuous('',breaks=c(min(range_ano):(max(range_ano)-1)))+
                labs(title=paste('Comparação entre estoque final e inicial ao longo dos anos\n',pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position="bottom")
            pl
        },height = 600, width = 800)
        output$plot_distr_ativos <- renderPlotly({
            turn_dynamic(
                gera_grafico_barras(estoques_prod(),'Ativos',paste('Percentual anual dos registros ativos\n',pop_name()))
            )
            })
        output$plot_distr_saidas <- renderPlotly({
            turn_dynamic(
                gera_grafico_barras(estoques_prod(),'Saídas',paste('Percentual anual dos registros de saidas\n',pop_name()))
            )
            })
        
        ######### Coringas #########
        output$plot_coringas <- renderPlot({
            plot_dados=raw_coringas
            
            plot_dados=plot_dados[plot_dados$RAMO==input$Cobertura &
                                  plot_dados$CLASSE==ifelse(input$Classe=='TODOS',input$Cobertura,input$Classe) &
                                  plot_dados$ANO %in% range_ano,4:6]
            names(plot_dados)=c('ANO','REP','QTD')
            for(ano in range_ano){
                for(rep in c(1:5)){
                    if(!(rep %in% plot_dados$REP[plot_dados$ANO==ano])){
                        plot_dados=rbind(plot_dados,c(ano,rep,0,0))
                    }
                }
            }
            
            plot_dados=plot_dados[order(plot_dados$ANO,plot_dados$REP),]
            plot_dados$ANO=as.numeric(plot_dados$ANO)
            plot_dados$QTD=as.numeric(plot_dados$QTD)
            plot_dados$REP=as.factor(plot_dados$REP)
            
            prorp=plot_dados$QTD[as.numeric(plot_dados$REP)==1]
            for(i in c(1:(length(range_ano)))){
                ano=range_ano[i]
                prorp[i]=prorp[i]/(sum(plot_dados$QTD[plot_dados$ANO==ano]))
            }
            prorp=1-prorp
            prorp=ifelse(is.nan(prorp),0,prorp)
            plot_dados=plot_dados[plot_dados$REP!=1,1:3]
    
            maximos=calcula_max(if(sum(plot_dados$QTD)==0){100}else{plot_dados$QTD})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            maximos=calcula_max(if(sum(prorp)==0){0.1}else{prorp})
            prorp_value=maximos[[1]]
            prorp_interval_size=maximos[[2]]
            prorp_max=maximos[[3]]
            
            pl=ggplot()+
                geom_bar(aes(x=plot_dados$ANO,y=plot_dados$QTD,fill=plot_dados$REP),stat='identity',position=position_dodge())+
                geom_line(aes(x=range_ano,y=(prorp*max_value)/prorp_max,color="Percentual do total"),stat='identity')+
                geom_point(aes(x=range_ano,y=(prorp*max_value)/prorp_max,shape="Percentual do total"),stat='identity')+
                scale_color_manual('',values='black')+
                scale_shape('')+
                geom_label(aes(x=range_ano,y=(prorp*max_value)/prorp_max,label=paste0(substr(prorp*100,1,4),'%')),
                           nudge_y=max_value/30)+
                scale_fill_hue(name='',labels=c('2','3','4','mais de 5'))+
                scale_y_continuous(name="Quantidade de CPF's",
                                   expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value),
                                   sec.axis = sec_axis(~ . / (max_value/prorp_max),
                                                       breaks=c(0:prorp_interval_size)*prorp_value,
                                                       labels=paste0(substr(as.character(c(0:prorp_interval_size)*100*prorp_value),1,4),'%')))+
                scale_x_continuous(name='Ano',breaks=range_ano)+
                labs(title=paste("CPF's associados a mais de um sexo e/ou\ndata de nascimento",pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position='bottom',legend.text = element_text(size=8))
            pl
        },height = 600, width = 800)
        
        ######### Estoques #########
        output$tabela_filtragem_motivo <- renderDataTable({
            tabela_final=datatable(cbind(fil_data(),col_data()),
                                   rownames=F,
                                   options=list(sDom  = '<"top"><"bottom">',
                                                ordering=F,
                                                columnDefs = list(list(targets = c(16:31),  
                                                                       visible = FALSE))),
                                   selection=list(mode="none", 
                                                  target="cell"))
            for(i in c(1:max(filtragem_data()$ANO-min(filtragem_data()$ANO)+1))){
                tabela_final=formatStyle(tabela_final,
                                         2+i,(length(names(fil_data()))+2+i),
                                         backgroundColor = styleEqual(c('','OK','Rejeitado','OK_selected','Rejeitado_selected'),
                                                                      c('#666666','#6666ff','#ff6666','#aaaaff','#ffaaaa')))
            }
            return(tabela_final)
        })
        output$tabela_filtragem_individuos <- renderDataTable({
            
            tabela_final=datatable(cbind(indv_data(),col_data()),
                                   rownames=F,
                                   options=list(sDom  = '<"top"><"bottom">',
                                                ordering=F,
                                                columnDefs = list(list(targets = c(16:31),  
                                                                       visible = FALSE))),
                                   selection=list(mode="none", 
                                                  target="cell"))
            for(i in c(1:max(filtragem_data()$ANO-min(filtragem_data()$ANO)+1))){
                tabela_final=formatStyle(tabela_final,
                                         2+i,((length(names(indv_data())))+2+i),
                                         backgroundColor = styleEqual(c('','OK','Rejeitado','OK_selected','Rejeitado_selected'),
                                                                      c('#666666','#6666ff','#ff6666','#aaaaff','#ffaaaa')))
            }
            return(tabela_final)
            
        })
        output$tabela_filtragem_exposicao <- renderDataTable({
            
            tabela_final=datatable(cbind(exp_data(),col_data()),
                                   rownames=F,
                                   options=list(sDom  = '<"top"><"bottom">',
                                                ordering=F,
                                                columnDefs = list(list(targets = c(16:31),  
                                                                       visible = FALSE))),
                                   selection=list(mode="none", 
                                                  target="cell"))
            for(i in c(1:max(filtragem_data()$ANO-min(filtragem_data()$ANO)+1))){
                tabela_final=formatStyle(tabela_final,
                                         2+i,((length(names(exp_data())))+2+i),
                                         backgroundColor = styleEqual(c('','OK','Rejeitado','OK_selected','Rejeitado_selected'),
                                                                      c('#666666','#6666ff','#ff6666','#aaaaff','#ffaaaa')))
            }
            return(tabela_final)
            
        })
        output$tabela_filtragem_obitos <- renderDataTable({
            tabela_final=datatable(cbind(obt_data(),col_data()),
                                   rownames=F,
                                   options=list(sDom  = '<"top"><"bottom">',
                                                ordering=F,
                                                columnDefs = list(list(targets = c(16:31),  
                                                                       visible = FALSE))),
                                   selection=list(mode="none", 
                                                  target="cell"))
            for(i in c(1:max(filtragem_data()$ANO-min(filtragem_data()$ANO)+1))){
                tabela_final=formatStyle(tabela_final,
                                         2+i,((length(names(exp_data())))+2+i),
                                         backgroundColor = styleEqual(c('','OK','Rejeitado','OK_selected','Rejeitado_selected'),
                                                                      c('#666666','#6666ff','#ff6666','#aaaaff','#ffaaaa')))
            }
            return(tabela_final)
            
        })
        output$tabua_filtragem_select <- renderPlotly({
            plot_data=dados()[dados()$TIPO=='PRODUTO',c(2,5,6,7,16)]
            
            flags=melt(cbind(col_data()[1:2],reac_val$act_map),id.var=c('PRODUTO','SEXO'),variable.name='ANO')
            flags$ANO=as.numeric(flags$ANO)+min(filtragem_data()$ANO)-1
            flags=interaction(flags[flags$value,1:3])
            
            plot_data=plot_data[paste(plot_data$CLASSE,plot_data$SEXO,plot_data$ANO,sep='.') %in% flags,]
            
            labels=paste(plot_data$CLASSE,ifelse(plot_data$SEXO=='M', 'Masculino','Feminino'),plot_data$ANO)
            
            plot_data$Mx_DATAPREV=ifelse(plot_data$Mx_DATAPREV==0,NA,plot_data$Mx_DATAPREV)
            
            plt=ggplot()+
                geom_point(aes(x=plot_data$IDADE,y=plot_data$Mx_DATAPREV,color=labels))+
                geom_line(stat = "identity",aes(x=BR_EMS[['M_MOR']]$idade,y=BR_EMS[['M_MOR']]$Mx,color=BR_EMS[['M_MOR']]$id_tabua))+
                geom_line(stat = "identity",aes(x=BR_EMS[['F_MOR']]$idade,y=BR_EMS[['F_MOR']]$Mx,color=BR_EMS[['F_MOR']]$id_tabua))+
                geom_line(stat = "identity",aes(x=BR_EMS[['M_SOB']]$idade,y=BR_EMS[['M_SOB']]$Mx,color=BR_EMS[['M_SOB']]$id_tabua))+
                geom_line(stat = "identity",aes(x=BR_EMS[['F_SOB']]$idade,y=BR_EMS[['F_SOB']]$Mx,color=BR_EMS[['F_SOB']]$id_tabua))+
                scale_color_manual('',values=c(c('grey','black','grey','black'),rainbow(length(unique(labels)),s=0.5)))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_log10('Mx',breaks = 10**c(-6:0),limits=10**c(-5,0),
                              labels = 10**c(-6:0))+
                labs(title='Taxa de mortalidade das subpopulações selecionadas',caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$indv_filtragem_select <- renderPlotly({
            plot_data=dados()[dados()$TIPO=='PRODUTO',c(2,5,6,7,8)]
            
            flags=melt(cbind(col_data()[1:2],reac_val$act_map),id.var=c('PRODUTO','SEXO'),variable.name='ANO')
            flags$ANO=as.numeric(flags$ANO)+min(filtragem_data()$ANO)-1
            flags=interaction(flags[flags$value,1:3])
            
            plot_data=plot_data[paste(plot_data$CLASSE,plot_data$SEXO,plot_data$ANO,sep='.') %in% flags,]
            
            labels=paste(plot_data$CLASSE,ifelse(plot_data$SEXO=='M', 'Masculino','Feminino'),plot_data$ANO)
            
            maximos=calcula_max(if(sum(plot_data$INDV)==0){100}else{plot_data$INDV})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(labels))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$INDV,color=labels))}else{
                    grafico=geom_text(aes(x=60,y=55,label='Selecione subpopulações para vizualizar este gráfico.'))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(labels)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title='Quantidade de indivíduos das subpopulações selecionadas',caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$expo_filtragem_select <- renderPlotly({
            plot_data=dados()[dados()$TIPO=='PRODUTO',c(2,5,6,7,9)]
            
            flags=melt(cbind(col_data()[1:2],reac_val$act_map),id.var=c('PRODUTO','SEXO'),variable.name='ANO')
            flags$ANO=as.numeric(flags$ANO)+min(filtragem_data()$ANO)-1
            flags=interaction(flags[flags$value,1:3])
            
            plot_data=plot_data[paste(plot_data$CLASSE,plot_data$SEXO,plot_data$ANO,sep='.') %in% flags,]
            
            labels=paste(plot_data$CLASSE,ifelse(plot_data$SEXO=='M', 'Masculino','Feminino'),plot_data$ANO)
            
            maximos=calcula_max(if(sum(plot_data$EXP)==0){100}else{plot_data$EXP})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(labels))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$EXP,color=labels))}else{
                grafico=geom_text(aes(x=60,y=55,label='Selecione subpopulações para vizualizar este gráfico.'))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(labels)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Exposição',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title='Exposição das subpopulações selecionadas',caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$obt_filtragem_select <- renderPlotly({
            plot_data=dados()[dados()$TIPO=='PRODUTO',c(2,5,6,7,10)]
            
            flags=melt(cbind(col_data()[1:2],reac_val$act_map),id.var=c('PRODUTO','SEXO'),variable.name='ANO')
            flags$ANO=as.numeric(flags$ANO)+min(filtragem_data()$ANO)-1
            flags=interaction(flags[flags$value,1:3])
            
            plot_data=plot_data[paste(plot_data$CLASSE,plot_data$SEXO,plot_data$ANO,sep='.') %in% flags,]
            
            labels=paste(plot_data$CLASSE,ifelse(plot_data$SEXO=='M', 'Masculino','Feminino'),plot_data$ANO)
            
            maximos=calcula_max(if(sum(plot_data$OBT)==0){100}else{plot_data$OBT})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(labels))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$OBT,color=labels))}else{
                    grafico=geom_text(aes(x=60,y=55,label='Selecione subpopulações para vizualizar este gráfico.'))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(labels)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Óbitos',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title='Óbitos das subpopulações selecionadas',caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        
        ######### Exposição #########
        output$plot_cpf <- renderPlot({
            plot_dados=pop_data()[pop_data()$SEXO %in% c('M','F'),
                                  c(2,6,8)]
            
            plot_dados=aggregate(INDV~.,plot_dados,sum)
            names(plot_dados)=c('ANO','SEXO','Qtd')
            
            maximos=calcula_max(plot_dados$Qtd)
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            for(ano in range_ano){
                if(!(ano %in% unique(plot_dados$ANO))){
                    plot_dados=rbind(plot_dados,c(ano,'M',0.0))
                    plot_dados=rbind(plot_dados,c(ano,'F',0.0))
                }
            }
            plot_dados=plot_dados[order(plot_dados$ANO,plot_dados$SEXO),]
            plot_dados$ANO=as.numeric(as.numeric(as.character(plot_dados$ANO)))
            plot_dados$SEXO=as.factor(plot_dados$SEXO)
            plot_dados$Qtd=as.numeric(plot_dados$Qtd)
            pl=ggplot(plot_dados)+
                geom_bar(aes(x=ANO,y=Qtd,fill=SEXO),stat='identity',position=position_dodge())+
                scale_fill_manual(name='',values=c('#dd4444','#4444dd'),labels=c('Feminino','Masculino'))+
                scale_y_continuous(name="Quantidade de CPF's",
                                   expand=c(0,0),
                                   limits=c(0,max_value),
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                scale_x_continuous(name='Ano',breaks=range_ano)+
                labs(title=paste("Quantidade de CPF's ativos\n",pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position='bottom')
            pl
        },height = 600, width = 800)
        output$plot_exp_etaria <- renderPlotly({
            gera_grafico_piramide(pop_data(),'EXP',pop_name())
        })
        output$plot_heatmap_expM <- renderPlot({
            gera_heatmap(pop_data(),sexo='M',tipo='EXP',titulo=paste('Exposição masculina\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        output$plot_heatmap_expF <- renderPlot({
            gera_heatmap(pop_data(),sexo='F',tipo='EXP',titulo=paste('Exposição feminina\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        
        ######### Óbitos #########
        output$plot_obitos_ano <- renderPlot({
            obt_dados=pop_data()
            plot_obitos=as.data.frame(matrix(0,0,3))
            names(plot_obitos)=c('ANO','OBT','DATAPREV')
            
            anos=range_ano
            anos_com_dataprev=range_ano[range_ano<2018]
            
            for(ano in anos){
                next_lines=as.data.frame(matrix(0,2,3))
                names(next_lines)=c('ANO','OBT','DATAPREV')
                next_lines$ANO=c(ano,ano)
                next_lines$OBT=c(sum(obt_dados[obt_dados$ANO==ano,]$OBT),sum(obt_dados[obt_dados$ANO==ano,]$OBT_EMPRESA))
                next_lines$DATAPREV=c('COM DATAPREV','SEM DATAPREV')
                plot_obitos=rbind(plot_obitos,next_lines)
            }
            
            plot_obitos$ANO=as.numeric(plot_obitos$ANO)
            plot_obitos$DATAPREV=as.factor(plot_obitos$DATAPREV)
            
            maximos=calcula_max(plot_obitos$OBT)
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            razao=(plot_obitos[plot_obitos$DATAPREV=='SEM DATAPREV',2]/plot_obitos[plot_obitos$DATAPREV=='COM DATAPREV',2])
            razao=ifelse(razao==0,NA,razao)
            
            maximum=ifelse(max((1/razao[razao!=0])-1,na.rm=T)<=10,max((1/razao[razao!=0])-1,na.rm=T),1)
            
            maximos=calcula_max(ifelse(maximum<=0,1,maximum))
            razao_value=maximos[[1]]
            razao_interval_size=maximos[[2]]
            razao_max_value=maximos[[3]]
            
            y_razao=((1/razao)-1)*max_value/razao_max_value
            y_razao=if(sum(!(is.na(y_razao)))==0){ifelse(is.na(y_razao),-1,y_razao)}else{y_razao}
            pl=ggplot()+
                geom_bar(aes(x=plot_obitos$ANO,y=plot_obitos$OBT,fill=interaction(plot_obitos$DATAPREV,ifelse(plot_obitos$ANO>=2018 & plot_obitos$DATAPREV=='COM DATAPREV','0','1'))),stat='identity',position=position_dodge())+
                geom_point(aes(x=anos[razao!=0],y=y_razao,color='Cresc. percentual\napós correção',shape='Cresc. percentual\napós correção'))+
                geom_line(aes(x=anos,
                              y=y_razao,
                              color='Cresc. percentual\napós correção',
                              linetype = range_ano %in% anos_com_dataprev))+
                geom_line(aes(x=anos,
                              y=y_razao,
                              color='Cresc. percentual\napós correção',
                              linetype = FALSE))+
                geom_label(aes(x=anos[razao!=0],
                               y=ifelse(y_razao>max_value*18/20,max_value*18/20,y_razao),
                               label=paste0(((((1/razao[razao!=0])-1)*10000)%/%1)/100,'%')),nudge_y=max_value/20)+
                scale_fill_manual(name='',values=if(length(anos_com_dataprev)==0){c('#ffaaaa','#7777ff')}else{c('#ffaaaa','#ff7777','#7777ff')},
                                  labels=if(length(anos_com_dataprev)==0){c('Com correção\nparcial','Sem correção')}else{c('Com correção\nparcial','Com correção\nintegral','Sem correção')})+
                scale_shape(name='')+
                scale_linetype_manual(name='',values=c('dashed','solid'))+
                scale_color_manual(name='',values='black')+
                scale_x_continuous('Ano', breaks=anos,limits=c(min(anos)-0.5,max(anos)+0.5))+
                scale_y_continuous(name='Óbitos',
                                   breaks=c(0:interval_size)*value,expand=c(0,0),
                                   sec.axis = sec_axis(~ . / (max_value/razao_max_value),
                                                       breaks=c(0:razao_interval_size)*razao_value,
                                                       labels=paste0((((c(0:razao_interval_size)*razao_value)*10000)%/%1)/100,'%')))+
                labs(title=paste('Evolução da quantidade de Óbitos ao longo dos anos\n',pop_name()),caption=fonte)+
                coord_cartesian(ylim = c(0,interval_size)*value)+
                guides(linetype = 'none')+
                theme_bw()+theme_setup+theme(legend.position='bottom')
            pl 
        },height = 600, width = 800)
        output$plot_obt_etaria <- renderPlotly({
            gera_grafico_piramide(pop_data(),'OBT',pop_name())
        })
        output$plot_heatmap_obtM <- renderPlot({
            gera_heatmap(pop_data(),sexo='M',tipo='OBT',titulo=paste('Óbitos masculinos\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        output$plot_heatmap_obtF <- renderPlot({
            gera_heatmap(pop_data(),sexo='F',tipo='OBT',titulo=paste('Óbitos femininos\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        
        ######### Entradas em invalidez #########
        output$plot_inv_ano <- renderPlot({
            
            inv_dados=dados()[dados()$TIPO=='COBERTURA' & dados()$CLASSE!='INV',c(2,5,13)]
            
            inv_dados=aggregate(INV~.,inv_dados,sum)
            if(sum(inv_dados$INV)>0){
                maximos=calcula_max(inv_dados$INV)
                value=maximos[[1]]
                interval_size=maximos[[2]]
                max_value=maximos[[3]]
            }else{
                value=1
                interval_size=10
                max_value=10
            }
            
            pl=ggplot(inv_dados)+
                geom_bar(aes(x=ANO,y=INV,fill=CLASSE),stat='identity',position=position_dodge())+
                scale_fill_hue(name='Coberturas',label=c('Acidente','Doença','Qualquer causa'))+
                scale_color_manual(name='',values='black')+
                scale_x_discrete('Ano',breaks=range_ano)+
                scale_y_continuous(name='Entradas',
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   expand=c(0,0),
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title='Evolução da quantidade de entradas em invalidez ao longo dos anos',caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position='bottom')
            pl 
        },height = 600, width = 800)
        output$plot_inv_etaria <- renderPlotly({
            gera_grafico_piramide(pop_data(),'INV',pop_name())
        })
        output$plot_heatmap_invM <- renderPlot({
            gera_heatmap(pop_data(),sexo='M',tipo='INV',titulo=paste('Entradas em invalidez masculinos\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        output$plot_heatmap_invF <- renderPlot({
            gera_heatmap(pop_data(),sexo='F',tipo='INV',titulo=paste('Entradas em invalidez femininos\n',pop_name()),flag_log =F)
        },height=1200, width = 600)
        
        ######### Mx #########
        output$plot_Mx_dataprev_M <- renderPlotly({
                tabua=pop_data()[pop_data()$SEXO=='M',]
                turn_dynamic(
                    gera_grafico_tabua(tabua,'Mx_DATAPREV','M',titulo=paste('Taxa de mortalidade masculina\n',pop_name()),input=input)
                )
        })
        output$plot_Mx_dataprev_F <- renderPlotly({
            tabua=pop_data()[pop_data()$SEXO=='F',]
            turn_dynamic(
                gera_grafico_tabua(tabua,'Mx_DATAPREV','F',titulo=paste('Taxa de mortalidade feminina\n',pop_name()),input=input)
            )
        })
        output$plot_heatmap_Mx_dataprevM <- renderPlot({
            gera_heatmap(pop_data(),sexo='M',tipo='Mx_DATAPREV',titulo=paste('Taxa de mortalidade masculina\n',pop_name()),flag_log =T)
        },height=1200, width = 600)
        output$plot_heatmap_Mx_dataprevF <- renderPlot({
            gera_heatmap(pop_data(),sexo='F',tipo='Mx_DATAPREV',titulo=paste('Taxa de mortalidade masculina\n',pop_name()),flag_log =T)
        },height=1200, width = 600)
        output$plot_Mx_M <- renderPlotly({
            tabua=pop_data()[pop_data()$SEXO=='M',]
            turn_dynamic(
                gera_grafico_tabua(tabua,'Mx','M',titulo=paste('Taxa de mortalidade masculina sem correção de óbitos\n',pop_name()),input=input)
            )
        })
        output$plot_Mx_F <- renderPlotly({
            tabua=pop_data()[pop_data()$SEXO=='F',]
            turn_dynamic(
                gera_grafico_tabua(tabua,'Mx','F',titulo=paste('Taxa de mortalidade feminina sem correção de óbitos\n',pop_name()),input=input)
            )
        })
        output$plot_heatmap_MxM <- renderPlot({
            gera_heatmap(pop_data(),sexo='M',tipo='Mx',titulo=paste('Taxa de mortalidade masculina sem correção de óbitos\n',pop_name()),flag_log =T)
        },height=1200, width = 600)
        output$plot_heatmap_MxF <- renderPlot({
            gera_heatmap(pop_data(),sexo='F',tipo='Mx',titulo=paste('Taxa de mortalidade masculina sem correção de óbitos\n',pop_name()),flag_log =T)
        },height=1200, width = 600)
        output$plot_razao_dataprev_M <- renderPlotly({
            tabuas=pop_data()[pop_data()$SEXO=='M',]
            gera_grafico_razao(tabuas,'M',pop_name())
        })
        output$plot_razao_dataprev_F <- renderPlotly({
            tabuas=pop_data()[pop_data()$SEXO=='F',]
            gera_grafico_razao(tabuas,'F',pop_name())
        })
        
        ######### Mx_inv #########
        output$plot_Mx_inv <- renderPlotly({
            tabua=dados()[as.numeric(as.character(dados()$ANO))>(max(range_ano)-5) & dados()$TIPO=='COBERTURA' & dados()$CLASSE==input$Classe,c(7,9,13)]
            turn_dynamic(
                gera_grafico_tabua(tabua,'INV','unisex',titulo=paste('Taxa de entrada em invalidez unisex\n',pop_name()),input=input)
            )
        })
        
        ######### GI #########
        output$plot_GI_total <- renderPlot({
            GI=rbind(
                cbind(aggregate(QTD~.,raw_GI()[raw_GI()$GI!=0,-2],sum),CLASSE='Indivíduos com informação sobre\no grau de instrução'),
                cbind(aggregate(QTD~.,raw_GI()[,-2],sum),CLASSE='Total de indivíduos')
            )
            
            GI$REF_INFO=as.numeric(as.character(GI$REF_INFO))
            
            razao=GI[GI$CLASSE=='Indivíduos com informação sobre\no grau de instrução',]$QTD/GI[GI$CLASSE=='Total de indivíduos',]$QTD
            razao=ifelse(GI[GI$CLASSE=='Total de indivíduos',]$QTD==0,NA,razao)
            
            maximos=calcula_max(GI$QTD)
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            maximos=calcula_max(razao[!(is.na(razao))])
            razao_value=maximos[[1]]
            razao_interval_size=maximos[[2]]+1
            razao_max_value=razao_interval_size*razao_value
            
            pl=ggplot()+
                geom_bar(aes(x=GI$REF_INFO,y=GI$QTD,fill=GI$CLASSE),stat='identity',position=position_dodge())+
                geom_line(aes(x=GI[GI$CLASSE=='Total de indivíduos',]$REF_INFO,
                              y=razao*(max_value/razao_max_value),
                              color='Percentual de indivíduos\ncom informação sobre\no grau de instrução'))+
                geom_point(aes(x=GI[GI$CLASSE=='Total de indivíduos',]$REF_INFO,
                               y=razao*(max_value/razao_max_value),
                               color='Percentual de indivíduos\ncom informação sobre\no grau de instrução',
                               shape='Percentual de indivíduos\ncom informação sobre\no grau de instrução'))+
                geom_label(aes(x=GI[GI$CLASSE=='Total de indivíduos',]$REF_INFO,
                               y=razao*(max_value/razao_max_value),
                               label=paste0(((1000000*razao)%/%100)/100,'%')),nudge_y=max_value/20)+
                scale_fill_hue(name='')+
                scale_shape(name='')+
                scale_color_manual(name='',values='black')+
                scale_x_continuous('Ano', breaks=range_ano,limits=c(min(range_ano)-0.5,max(range_ano)+0.5))+
                scale_y_continuous(name='Quantidade de indivíduos',
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,expand=c(0,0),
                                   labels=set_format(c(0:interval_size)*value),
                                   sec.axis = sec_axis(~ . / (max_value/razao_max_value),
                                                       breaks=c(0:razao_interval_size)*razao_value,
                                                       labels=paste0(substr(as.character((c(0:razao_interval_size)*razao_value)*100),1,7),'%')))+
                labs(title=paste('Evolução da quantidade de registros com informação\nsobre o grau de instrução',pop_name()),caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position='bottom')
            pl
        },height = 600, width = 800)
        output$plot_GI_stacked <- renderPlot({
            GI=raw_GI()
            GI$REF_INFO=as.numeric(as.character(GI$REF_INFO))
            GI$GI=factor(GI$GI,levels=c(3,2,1,0))
            levels(GI$GI)=c('Com ensino superior','Com ensino médio','Sem ensino médio','Não informado')
            
            ref_ano=GI$REF_INFO[GI$QTD==max(GI$QTD)]
            
            maximos=calcula_max(sum(GI$QTD[GI$REF_INFO==ref_ano]))
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            ggplot(GI)+
                geom_area(aes(x=REF_INFO,y=QTD,fill=GI),size=0.5, colour="black",alpha=0.75)+
                scale_fill_hue('')+
                scale_y_continuous(name='Percentual do total',labels=c('0%','25%','50%','75%','100%'),expand=c(0,0))+
                scale_x_continuous(name='Ano',expand=c(0,0),breaks=range_ano)+
                labs(title=paste('Quantidade de indivíduos por grau de instrução\n',pop_name()),
                     caption=fonte)+
                theme_bw()+theme_setup+theme(legend.position="bottom",panel.grid.minor.x = element_blank())+
                scale_y_continuous('Quantidade de indivíduos',expand=c(0,0),limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                scale_fill_manual('',values=c('#F8766D','#7CAE00','#00BFC4','#C77CFF')[c(2,1,4,3)]
            )
        },height = 600, width = 800)
        output$plot_exp_GI <- renderPlotly({
            placeholder=GI_data()
            gera_grafico_piramide(placeholder,'EXP',pop_name=pop_name(),color_by='CLASSE')
        })
        output$plot_Mx_GI_M <- renderPlotly({
            tabua=GI_data()[GI_data()$SEXO=='M',]
            tabua$ANO=tabua$CLASSE
            turn_dynamic(
                gera_grafico_tabua(tabua,'Mx_DATAPREV','M',titulo=paste('Taxa de mortalidade masculina por grau de instrução\nsem correção de óbitos',pop_name()),input=input)+
                scale_color_manual('',values=c('black','#F8766D','#7CAE00','#00BFC4','#C77CFF'))
            )
        })
        output$plot_Mx_GI_F <- renderPlotly({
            tabua=GI_data()[GI_data()$SEXO=='F',]
            tabua$ANO=tabua$CLASSE
            turn_dynamic(
                gera_grafico_tabua(tabua,'Mx_DATAPREV','F',titulo=paste('Taxa de mortalidade feminina por grau de instrução\nsem correção de óbitos',pop_name()),input=input)+
                scale_color_manual('',values=c('black','#F8766D','#7CAE00','#00BFC4','#C77CFF'))
            )
        })
        
        ######### Localização #########
        output$plot_mapa_loc_qtd <- renderPlotly({
            map=cbind(raw_map[,1:3],loc_data()[['UF']][raw_map$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            tipo='Indivíduos'
            perc=sum(loc_data()[['UF']]$INDV)/(sum(loc_data()[['UF']]$INDV)+sum(loc_data()[['null']]$INDV))
            
            title='Distribuição dos indivíduos por UF'
            title=paste(title,
                        ifelse(min(input$ano_loc)==max(input$ano_loc),
                               paste('em',max(input$ano_loc)),
                               paste('de',min(input$ano_loc),'à',max(input$ano_loc))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_loc,NA,map[[tipo]])
            if(input$log_loc){
                tipo='log10(Indivíduos)'
                map[[tipo]]=log10(map[['Indivíduos']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$uf_map[as.numeric(raw_map$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low='white',high='blue')+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='loc_qtd') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_loc_exp <- renderPlotly({
            map=cbind(raw_map[,1:3],loc_data()[['UF']][raw_map$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            
            tipo='Exposição'
            perc=sum(loc_data()[['UF']]$EXP)/(sum(loc_data()[['UF']]$EXP)+sum(loc_data()[['null']]$EXP))
            
            title='Exposição por UF'
            title=paste(title,
                        ifelse(min(input$ano_loc)==max(input$ano_loc),
                               paste('em',max(input$ano_loc)),
                               paste('de',min(input$ano_loc),'à',max(input$ano_loc))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_loc,NA,map[[tipo]])
            if(input$log_loc){
                tipo='log10(Exposição)'
                map[[tipo]]=log10(map[['Exposição']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$uf_map[as.numeric(raw_map$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='loc_exp') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_loc_obt <- renderPlotly({
            map=cbind(raw_map[,1:3],loc_data()[['UF']][raw_map$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            
            tipo='Óbitos'
            perc=sum(loc_data()[['UF']]$OBT)/(sum(loc_data()[['UF']]$OBT)+sum(loc_data()[['null']]$OBT))
    
            title='Óbitos por UF'
            title=paste(title,
                        ifelse(min(input$ano_loc)==max(input$ano_loc),
                               paste('em',max(input$ano_loc)),
                               paste('de',min(input$ano_loc),'à',max(input$ano_loc))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_loc,NA,map[[tipo]])
            if(input$log_loc){
                tipo='log10(Óbitos)'
                map[[tipo]]=log10(map[['Óbitos']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$uf_map[as.numeric(raw_map$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='loc_obt') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_loc_tx <- renderPlotly({
            map=cbind(raw_map[,1:3],loc_data()[['UF']][raw_map$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Mx')
            tipo='Mx'
            
            title='Taxa média de mortalidade por UF'
            title=paste(title,
                        ifelse(min(input$ano_loc)==max(input$ano_loc),
                               paste('em',max(input$ano_loc)),
                               paste('de',min(input$ano_loc),'à',max(input$ano_loc))))
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_loc,NA,map[[tipo]])
            if(input$log_loc){
                tipo='log10(Mx)'
                map[[tipo]]=log10(map[['Mx']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$uf_map[as.numeric(raw_map$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='loc_tx') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        
        output$tabua_uf_select_M <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='M',]
            
            plot_data$ANO=plot_data$CLASSE
            turn_dynamic(
                gera_grafico_tabua(plot_data,'Mx_DATAPREV','M',titulo=paste("Taxas de mortalidade masculinas\nnas UF's selecionadas"),input=input)
            )
        })
        output$indv_uf_select_M <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$INDV)==0){100}else{plot_data$INDV})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$INDV,color=plot_data$CLASSE))}else{
                grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Quantidade de indivíduos nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$exp_uf_select_M <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$EXP)==0){100}else{plot_data$EXP})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$EXP,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Exposição masculina nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$obt_uf_select_M <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$OBT)==0){100}else{plot_data$OBT})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$OBT,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Óbitos masculino nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        
        output$tabua_uf_select_F <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='F',]
            
            plot_data$ANO=plot_data$CLASSE
            turn_dynamic(
                gera_grafico_tabua(plot_data,'Mx_DATAPREV','F',titulo=paste("Taxas de mortalidade femininas\nnas UF's selecionadas"),input=input)
            )
        })
        output$indv_uf_select_F <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$INDV)==0){100}else{plot_data$INDV})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$INDV,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Quantidade de indivíduos nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$exp_uf_select_F <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$EXP)==0){100}else{plot_data$EXP})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$EXP,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Exposição feminina nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$obt_uf_select_F <- renderPlotly({
            plot_data=loc_data_idade()[loc_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$OBT)==0){100}else{plot_data$OBT})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$OBT,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Óbitos femininas nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        
        observeEvent(event_data('plotly_click',source='loc_qtd', priority = "event"),{
            idx=event_data('plotly_click',source='loc_qtd', priority = "event")$curveNumber+1
            pre_data=loc_data()[['UF']]
            pre_data$INDV=ifelse(pre_data$EXP<input$min_loc,NA,pre_data$INDV)
            #uf=pre_data$CLASSE[order(pre_data$INDV,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$uf_map[idx]=!reac_val$uf_map[idx]
        })
        observeEvent(event_data('plotly_click',source='loc_exp', priority = "event"),{
            idx=event_data('plotly_click',source='loc_exp', priority = "event")$curveNumber+1
            pre_data=loc_data()[['UF']]
            pre_data$EXP=ifelse(pre_data$EXP<input$min_loc,NA,pre_data$EXP)
            #uf=pre_data$CLASSE[order(pre_data$EXP,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$uf_map[idx]=!reac_val$uf_map[idx]
        })
        observeEvent(event_data('plotly_click',source='loc_obt', priority = "event"),{
            idx=event_data('plotly_click',source='loc_obt', priority = "event")$curveNumber+1
            
            pre_data=loc_data()[['UF']]
            pre_data$OBT=ifelse(pre_data$EXP<input$min_loc,NA,pre_data$OBT)
            #uf=pre_data$CLASSE[order(pre_data$OBT,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$uf_map[idx]=!reac_val$uf_map[idx]
        })
        observeEvent(event_data('plotly_click',source='loc_tx', priority = "event"),{
            idx=event_data('plotly_click',source='loc_tx', priority = "event")$curveNumber+1
            pre_data=loc_data()[['UF']]
            pre_data$Mx=ifelse(pre_data$EXP<input$min_loc,NA,pre_data$Mx)
            #uf=pre_data$CLASSE[order(pre_data$Mx,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$uf_map[idx]=!reac_val$uf_map[idx]
        })
        
        output$plot_mapa_region_qtd <- renderPlotly({
            map=cbind(raw_region[,1:3],region_data()[['UF']][raw_region$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            tipo='Indivíduos'
            perc=sum(region_data()[['UF']]$INDV)/(sum(region_data()[['UF']]$INDV)+sum(region_data()[['null']]$INDV))
            
            title='Distribuição dos indivíduos por região'
            title=paste(title,
                        ifelse(min(input$ano_region)==max(input$ano_region),
                               paste('em',max(input$ano_region)),
                               paste('de',min(input$ano_region),'à',max(input$ano_region))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_region,NA,map[[tipo]])
            if(input$log_region){
                tipo='log10(Indivíduos)'
                map[[tipo]]=log10(map[['Indivíduos']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$region_map[as.numeric(raw_region$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low='white',high='blue')+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='region_qtd') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_region_exp <- renderPlotly({
            map=cbind(raw_region[,1:3],region_data()[['UF']][raw_region$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            
            tipo='Exposição'
            perc=sum(region_data()[['UF']]$EXP)/(sum(region_data()[['UF']]$EXP)+sum(region_data()[['null']]$EXP))
            
            title='Exposição por região'
            title=paste(title,
                        ifelse(min(input$ano_region)==max(input$ano_region),
                               paste('em',max(input$ano_region)),
                               paste('de',min(input$ano_region),'à',max(input$ano_region))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_region,NA,map[[tipo]])
            if(input$log_region){
                tipo='log10(Exposição)'
                map[[tipo]]=log10(map[['Exposição']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$region_map[as.numeric(raw_region$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='region_exp') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_region_obt <- renderPlotly({
            map=cbind(raw_region[,1:3],region_data()[['UF']][raw_region$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Taxa média de mortalidade')
            
            tipo='Óbitos'
            perc=sum(region_data()[['UF']]$OBT)/(sum(region_data()[['UF']]$OBT)+sum(region_data()[['null']]$OBT))
            
            title='Óbitos por região'
            title=paste(title,
                        ifelse(min(input$ano_region)==max(input$ano_region),
                               paste('em',max(input$ano_region)),
                               paste('de',min(input$ano_region),'à',max(input$ano_region))))
            title=paste0(title,'\n(',round(100*perc,2),'% de informação encontrada)')
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_region,NA,map[[tipo]])
            if(input$log_region){
                tipo='log10(Óbitos)'
                map[[tipo]]=log10(map[['Óbitos']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$region_map[as.numeric(raw_region$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='region_obt') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        output$plot_mapa_region_tx <- renderPlotly({
            map=cbind(raw_region[,1:3],region_data()[['UF']][raw_region$Index,])
            names(map)=c('X','Y','ID','UF','Indivíduos','Exposição','Óbitos','Mx')
            tipo='Mx'
            
            title='Taxa média de mortalidade por região'
            title=paste(title,
                        ifelse(min(input$ano_region)==max(input$ano_region),
                               paste('em',max(input$ano_region)),
                               paste('de',min(input$ano_region),'à',max(input$ano_region))))
            
            map[[tipo]]=ifelse(map[['Exposição']]<input$min_region,NA,map[[tipo]])
            if(input$log_region){
                tipo='log10(Mx)'
                map[[tipo]]=log10(map[['Mx']])
            }
            pl=ggplot(map) +
                geom_polygon(aes_string(x='X',y='Y',color='UF',fill=tipo),
                             group=map$ID,
                             alpha=ifelse(reac_val$region_map[as.numeric(raw_region$Index)],0.25,1),
                             lwd=0.1)+
                scale_fill_gradient(low=low_color,high=high_color)+
                scale_color_manual('',values=rep('black',27))+
                scale_y_continuous('',breaks=c())+
                scale_x_continuous('',breaks=c())+
                coord_fixed()+
                labs(title=title)+
                theme_void()+theme(panel.border=element_blank(),panel.grid=element_blank(),axis.line=element_blank(),legend.position='none')
            
            final_plot=ggplotly(pl,source='region_tx') %>%
                layout(annotations = 
                           list(x = 1, y = 0, text = fonte, 
                                showarrow = F, xref='paper',yref='paper',
                                xanchor='right', yanchor='bottom', xshift=0, yshift=0,
                                font=list(size=15, color="black")))
            return(final_plot)
        })
        
        output$tabua_region_select_M <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='M',]
            
            plot_data$ANO=plot_data$CLASSE
            turn_dynamic(
                gera_grafico_tabua(plot_data,'Mx_DATAPREV','M',titulo=paste("Taxas de mortalidade masculinas nas regiões selecionadas"),input=input)
            )
        })
        output$indv_region_select_M <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$INDV)==0){100}else{plot_data$INDV})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$INDV,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione regiões para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Quantidade de indivíduos nas regiões selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$exp_region_select_M <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$EXP)==0){100}else{plot_data$EXP})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$EXP,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Exposição masculina nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$obt_region_select_M <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='M',]
            
            maximos=calcula_max(if(sum(plot_data$OBT)==0){100}else{plot_data$OBT})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$OBT,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione regiões para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Óbitos masculina nas regiões selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        
        output$tabua_region_select_F <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='F',]
            
            plot_data$ANO=plot_data$CLASSE
            turn_dynamic(
                gera_grafico_tabua(plot_data,'Mx_DATAPREV','F',titulo=paste("Taxas de mortalidade femininas nas regiões selecionadas"),input=input)
            )
        })
        output$indv_region_select_F <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$INDV)==0){100}else{plot_data$INDV})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$INDV,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione regiões para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Quantidade de indivíduos nas regiões selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$exp_region_select_F <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$EXP)==0){100}else{plot_data$EXP})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$EXP,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione UF's para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Exposição feminina nas UF's selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        output$obt_region_select_F <- renderPlotly({
            plot_data=region_data_idade()[region_data_idade()$SEXO=='F',]
            
            maximos=calcula_max(if(sum(plot_data$OBT)==0){100}else{plot_data$OBT})
            value=maximos[[1]]
            interval_size=maximos[[2]]
            max_value=maximos[[3]]
            
            if(length(unique(plot_data$CLASSE))>0){
                grafico=geom_line(aes(x=plot_data$IDADE,y=plot_data$OBT,color=plot_data$CLASSE))}else{
                    grafico=geom_text(aes(x=60,y=55,label="Selecione regiões para vizualizar este gráfico."))}
            plt=ggplot()+
                grafico+
                scale_color_manual('',values=rainbow(length(unique(plot_data$CLASSE)),s=0.5))+
                scale_x_continuous('Idade', breaks=c(1:12)*10, labels=(c(1:12)*10), limits=c(0,120),expand=c(0,0))+
                scale_y_continuous('Quantidade',expand=c(0,0),
                                   limits=c(0,interval_size)*value,
                                   breaks=c(0:interval_size)*value,
                                   labels=set_format(c(0:interval_size)*value))+
                labs(title="Óbitos feminina nas regiões selecionadas",caption=fonte)+
                theme_bw()+theme(legend.position="bottom",legend.text = element_text(size=7),plot.title = element_text(hjust = 0.5))
            
            turn_dynamic(plt)
        })
        
        observeEvent(event_data('plotly_click',source='region_qtd', priority = "event"),{
            idx=event_data('plotly_click',source='region_qtd', priority = "event")$curveNumber+1
            pre_data=region_data()[['UF']]
            pre_data$INDV=ifelse(pre_data$EXP<input$min_region,NA,pre_data$INDV)
            #uf=pre_data$CLASSE[order(pre_data$INDV,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$region_map[idx]=!reac_val$region_map[idx]
        })
        observeEvent(event_data('plotly_click',source='region_exp', priority = "event"),{
            idx=event_data('plotly_click',source='region_exp', priority = "event")$curveNumber+1
            pre_data=region_data()[['UF']]
            pre_data$EXP=ifelse(pre_data$EXP<input$min_region,NA,pre_data$EXP)
            #uf=pre_data$CLASSE[order(pre_data$EXP,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$region_map[idx]=!reac_val$region_map[idx]
        })
        observeEvent(event_data('plotly_click',source='region_obt', priority = "event"),{
            idx=event_data('plotly_click',source='region_obt', priority = "event")$curveNumber+1
            
            pre_data=region_data()[['UF']]
            pre_data$OBT=ifelse(pre_data$EXP<input$min_region,NA,pre_data$OBT)
            #uf=pre_data$CLASSE[order(pre_data$OBT,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$region_map[idx]=!reac_val$region_map[idx]
        })
        observeEvent(event_data('plotly_click',source='region_tx', priority = "event"),{
            idx=event_data('plotly_click',source='region_tx', priority = "event")$curveNumber+1
            pre_data=region_data()[['UF']]
            pre_data$Mx=ifelse(pre_data$EXP<input$min_region,NA,pre_data$Mx)
            #uf=pre_data$CLASSE[order(pre_data$Mx,na.last = T)][idx]
            uf=pre_data$CLASSE[idx]
            idx=match(uf,pre_data$CLASSE)
            reac_val$region_map[idx]=!reac_val$region_map[idx]
        })
        
    
    }
        
    ###### Criando textos ######
    
    sufix_list=c('intro',
                 paste0('C1_',c(1:2)),
                 paste0('reg_',c(1:6)),
                 paste0('cor_',c(1:2)),
                 'fil_1',
                 paste0('pop_',c(1:4)),
                 paste0('obt_',c(1:4)),
                 paste0('tx_',c(1:1)),
                 paste0('inv_',c(1:4)),
                 paste0('tx_inv_',c(1:2)),
                 paste0('GI_',c(1:5)),
                 paste0('loc_',c(1:4)))
    
    observeEvent(input$save,{
        if(reac_val$edit_mode%%2==1){
            for(sufix in sufix_list){
                salvar_texto(paste0('text_',sufix),text,emp,input$Cobertura,input$Classe,input$user)
            }
        }
    })
    
    
    create_save_bottom=function(sufix){
        new_bottom<-actionButton(paste0("save_",sufix), "Salvar",width='150px',icon=icon('save'),align='left')
        observeEvent(input[[paste0("save_",sufix)]],{
            text<-str_replace_all(input[[paste0('textinput_',sufix)]],'\n','<br>')
            salvar_texto(paste0('text_',sufix),text,paste(emp,cod_emp,sep='_'),input$Cobertura,input$Classe,input$user)
        })
        return(new_bottom)
    }
    create_back_bottom=function(sufix){
        new_bottom<-renderUI({
            if(input$edit_button | input[[paste0("save_",sufix)]]){
            }
            pre_files_list=list.files(paste0(dir,
                              'textos/',
                              paste(emp,cod_emp,sep='_'),
                              '/',
                              input$Cobertura,
                              '/',
                              input$Classe,
                              '/text_',
                              sufix,
                              '/',
                              'history'))
            files_list=list()
            for(item in pre_files_list[order(pre_files_list,decreasing = T)]){
                pre_text=str_split(str_replace_all(item,'.txt',''),' ')[[1]]
                data=str_split(pre_text[1],'_')[[1]]
                hora=str_replace_all(pre_text[2],'_',':')
                usr=pre_text[3]
                files_list[paste0(usr,' - ',hora,' - ',data[3],'/',data[2],'/',data[1])]=item
            }
            out_guy=dropdown(label='Carregar',
                     fluidRow(selectInput(paste0('file_load_',sufix),'Arquivos disponíveis',choices=files_list),align='left'),
                     fluidRow(actionButton(paste0("back_",sufix), "Carregar",width='150px'),align='right'),
                     icon=icon('folder-open'),
                     status='obnoxious',
                     right= T)
            
            observeEvent(input[[paste0("back_",sufix)]],{
                final_text<-carregar_history(paste0('text_',sufix),
                                           paste(emp,cod_emp,sep='_'),
                                           input$Cobertura,
                                           input$Classe,
                                           input[[paste0('file_load_',sufix)]])
                updateTextAreaInput(inputId=paste0('textinput_',sufix),label='',value=paste(final_text,collapse = '\n'))
            })
            out_guy
        })
        return(new_bottom)
    }
    create_default_bottom=function(sufix){
        new_bottom<-actionButton(paste0("default_",sufix), "Tornar padrão",width='150px',icon=icon('stamp'),align='left')
        observeEvent(input[[paste0("default_",sufix)]],{
            text<-str_replace_all(input[[paste0('textinput_',sufix)]],'\n','<br>')
            salvar_padrao(paste0('text_',sufix),text)
            deleta_texto(paste0('text_',sufix),paste(emp,cod_emp,sep='_'),input$Cobertura,input$Classe)
        })
        return(new_bottom)
    }
    create_load_bottom=function(sufix){
        new_bottom<-actionButton(paste0("load_",sufix), "Restaurar padrão",width='150px',icon=icon('undo'),align='left')
        observeEvent(input[[paste0("load_",sufix)]],{
            deleta_texto(paste0('text_',sufix),paste(emp,cod_emp,sep='_'),input$Cobertura,input$Classe)
        })
        return(new_bottom)
    }
    help_text=eventReactive(c(input$Cobertura,input$Produto),{
        text="<b>Instruções</b>
                                             <br>
                                             A caixa de texto ao lado é utilizada para inserir textos no relatório iterativo fora do modos de edição.
                                             O texto escrito será interpretado como HTML, desta forma todos os comandos dessa linguagem estão disponíveis para o usuário.
                                             Caso a caixa de texto esteja vazia, o relatório buscará o texto padrão correspondente para esta caixa de texto.<br>
                                             <br>
                                             Além de comandos em HTML, o usuário também pode inserir fórmula em LaTeX, desde que as fórmulas estejam entre \"\\( \\text{\\$} \\)\"  ou entre  \"\\( \\text{\\$\\$} \\)\".<br>
                                             <br>
                                             Por último, adiante temos uma lista de comandos que podem ser úteis de HTML:<br>
                                             <br>
                                             $$ \\small{
                                             \\begin{aligned}
                                             \\ & \\text{&ltb&gt Texto &lt/b&gt}  & \\rightarrow \\quad &  \\bf{\\text{Texto}}\\text{.} & \\\\
                                             \\ &                                                           & & \\\\
                                             \\ & \\text{&lti&gt Texto &lt/i&gt}  & \\rightarrow \\quad &  \\it{\\text{Texto}} \\text{.}  & \\\\
                                             \\ &                                                            & & \\\\
                                             \\ & \\text{&ltu&gt Texto &lt/u&gt} & \\rightarrow \\quad &  \\underline{\\text{Texto}} \\text{.}  & \\\\
                                             \\ &                                                            & & \\\\
                                             \\ & \\text{&ltEMP&gt}               & \\rightarrow \\quad &  \\text{Abreviação para o nome da empresa} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira EMP>''}\\text{.} & \\\\
                                             \\ & \\text{&ltempresa&gt}           & \\rightarrow \\quad &  \\text{Nome da empresa} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira empresa>''}\\text{.} & \\\\
                                             \\ & \\text{&ltcod_emp&gt}           & \\rightarrow \\quad &  \\text{Código da empresa} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira COD_EMP>''}\\text{.} & \\\\
                                             \\ & \\text{&ltCobertura&gt}         & \\rightarrow \\quad &  \\text{Cobertura em questão} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira Cobertura>''}\\text{.} & \\\\
                                             \\ & \\text{&ltcobertura&gt}         & \\rightarrow \\quad &  \\text{Cobertura em questão, mas em minúsculo} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira cobertura>''}\\text{.} & \\\\
                                             \\ & \\text{&ltCOB&gt}               & \\rightarrow \\quad &  \\text{Cobertura em questão, mas abreviado} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira COB>''}\\text{.} & \\\\
                                             \\ & \\text{&ltpop_name&gt}          & \\rightarrow \\quad &  \\text{Nome da subpopulação em questão acrescido de artigo} & \\\\
                                             \\ &                                  & &  \\text{ex.: } `` \\text{<insira pop_name>''}\\text{.} & \\\\
                                             \\ & \\text{&ltmin_ano&gt}           & \\rightarrow \\quad &  \\text{Primeiro ano de envio de dados} & \\\\
                                             \\ &                                  & &  \\text{ex.: } ``\\text{<insira min_ano>''}\\text{.} & \\\\
                                             \\ & \\text{&ltmax_ano&gt}           & \\rightarrow \\quad &  \\text{Último ano nos dados usados no relatório} & \\\\
                                             \\ &                                  & &  \\text{ex.: } ``\\text{<insira max_ano>''}{.} & 
                                             \\end{aligned}}$$
        
                                              "
        ref_cob=ifelse(is.null(input$Cobertura),'MOR',input$Cobertura)
        text=str_replace_all(text,'<insira empresa>',empresa_nome)
        text=str_replace_all(text,'<insira EMP>',emp)
        text=str_replace_all(text,'<insira COD_EMP>',as.character(cod_emp))
        text=str_replace_all(text,'<insira cobertura>',ifelse(ref_cob=='MOR','morte',ifelse(ref_cob=='SOB','sobrevivência','invalidez')))
        text=str_replace_all(text,'<insira Cobertura>',ifelse(ref_cob=='MOR','Morte',ifelse(ref_cob=='SOB','Sobrevivência','Invalidez')))
        text=str_replace_all(text,'<insira COB>',ref_cob)
        text=str_replace_all(text,'<insira pop_name>',str_sub(pop_name(),2))
        text=str_replace_all(text,'<insira min_ano>',as.character(min(range_ano)))
        text=str_replace_all(text,'<insira max_ano>',as.character(max(range_ano)))
        return(HTML(text))
    })

    create_pre_text=function(sufix){
        output[[paste0('text_',sufix)]]=renderUI({
            final_text=carregar_texto(paste0('text_',sufix),
                                      paste(emp,cod_emp,sep='_'),
                                      input$Cobertura,
                                      input$Classe)
            final_text=str_replace_all(final_text,'\n','<br>')
            if(ifelse(is.null(input$edit_button),0,1)){
            }
             ref_cob=ifelse(is.null(input$Cobertura),'MOR',input$Cobertura)
             final_text=str_replace_all(final_text,'<empresa>',empresa_nome)
             final_text=str_replace_all(final_text,'<EMP>',emp)
             final_text=str_replace_all(final_text,'<COD_EMP>',as.character(cod_emp))
             final_text=str_replace_all(final_text,'<cobertura>',ifelse(ref_cob=='MOR','morte',ifelse(ref_cob=='SOB','sobrevivência','invalidez')))
             final_text=str_replace_all(final_text,'<Cobertura>',ifelse(ref_cob=='MOR','Morte',ifelse(ref_cob=='SOB','Sobrevivência','Invalidez')))
             final_text=str_replace_all(final_text,'<COB>',ref_cob)
             final_text=str_replace_all(final_text,'<min_ano>',as.character(min(range_ano)))
             final_text=str_replace_all(final_text,'<max_ano>',as.character(max(range_ano)))
             final_text=str_replace_all(final_text,'<pop_name>',str_sub(pop_name(),2))
            withMathJax(HTML(final_text))
        })
    }
    create_text_area=function(sufix){
        observeEvent(c(input$Cobertura,
                       input$Classe,
                       input$edit_button,
                       input[[paste0("back_",sufix)]],
                       input[[paste0("load_",sufix)]]),{
            final_text<-carregar_texto(paste0('text_',sufix),
                                       paste(emp,cod_emp,sep='_'),
                                       input$Cobertura,
                                       input$Classe)
            updateTextAreaInput(session, inputId=paste0('textinput_',sufix),label='',value=paste(final_text,collapse = '\n'))
        })
        
        conditionalPanel('output.edit_mode%2==1',
                         fluidRow(
                             column(10,offset=1,
                                    textAreaInput(paste0('textinput_',sufix), '',width='100%',resize='vertical',value='')
                             ),
                             column(1,
                                    bottom_save[[sufix]],
                                    bottom_back[[sufix]],
                                    bottom_default[[sufix]],
                                    bottom_load[[sufix]],
                                    renderUI(dropdown(label='Ajuda',
                                             help_text(),
                                             icon = icon("question"),
                                             width='600px',
                                             status='obnoxious',
                                             right=T))
                             ),
                             align='justify',
                             style=text_distance))
    }
    create_text=function(sufix){
        column(12,
               text_area[[sufix]],
               conditionalPanel('output.edit_mode%2==0',
                                fluidRow(withMathJax(uiOutput(paste0('text_',sufix))),align='justify',
                                         style=text_distance)))
    }
        
    change_names=function(lista){
        names(lista)=sufix_list
        return(lista)
    }
    
    bottom_save=lapply(sufix_list,create_save_bottom) %>% change_names
    bottom_back=lapply(sufix_list,create_back_bottom) %>% change_names
    bottom_default=lapply(sufix_list,create_default_bottom) %>% change_names
    bottom_load=lapply(sufix_list,create_load_bottom) %>% change_names
    text_area=lapply(sufix_list,create_text_area) %>% change_names
    
    pre_text_list=lapply(sufix_list,create_pre_text) %>% change_names
    text_list=lapply(sufix_list,create_text) %>% change_names
    
    ###### Definindo linhas ###### 
    {
    rows_list=list(
        ######### Critica #########
        C1_1=fluidRow(plotOutput("plot_filtragem", width = "100%") %>% withSpinner(),align="center",style = social_distance),
        ######### Estoques #########
        reg_1=fluidRow(plotOutput("plot_estoques", width = "100%") %>% withSpinner(),style = social_distance,align="center"),
        reg_2=fluidRow(tableOutput("table_estoques"),escape =FALSE,style=table_distance),
        reg_3=fluidRow(plotOutput("plot_estoques_registro", width = "100%") %>% withSpinner(),style = social_distance,align="center"),
        reg_4=fluidRow(tableOutput("table_estoques_registro"),escape =FALSE,style=table_distance),
        reg_5=fluidRow(plotOutput("plot_obs_s_exp", width = "100%") %>% withSpinner(),style = social_distance,align="center"),
        reg_6=fluidRow(tableOutput("table_obs_s_exp"),escape =FALSE,style=table_distance),
        reg_7=fluidRow(plotOutput("plot_estoques_inicio_fim", width = "100%") %>% withSpinner(),style = social_distance,align="center"),
        reg_8=fluidRow(conditionalPanel('input.Classe=="TODOS"',plotlyOutput("plot_distr_ativos",height='600px', width = '800px')),align="center",style= "padding-top: 20%;"),
        reg_9=fluidRow(conditionalPanel('input.Classe=="TODOS"',plotlyOutput("plot_distr_saidas",height='600px', width = '800px')),align="center"),
        ######### Coringas #########
        cor_1=fluidRow(plotOutput("plot_coringas", width = "100%") %>% withSpinner(),style = social_distance,align="center"),
        ######### Filtragem #########
        fil_1=fluidRow(tabsetPanel(
            tabPanel(h5('Exclusões'),
                     column(11,
                            dataTableOutput('tabela_filtragem_motivo')),
                     column(1,
                            dropdownButton(
                                HTML(
                                    '
                                              <b>OK - </b>Não excluído <br>
                                              <b> 1 - </b>Exposição menor que 1000 <br>
                                              <b> 2 - </b>MENOR que o limite inferior da IBGE <br>
                                              <b> 3 - </b>MAIOR que o limite superior da IBGE <br>
                                              <b> 4 - </b>MENOR que o limite inferior da CSO <br>
                                              <b> 5 - </b>MAIOR que o limite superior da CSO <br>
                                              <b> 6 - </b>MENOR que a IBGE e MENOR que a CSO <br>
                                              <b> 7 - </b>MENOR que a IBGE e MAIOR que a CSO <br>
                                              <b> 8 - </b>MAIOR que a IBGE e MAIOR que a CSO <br>
                                              <b> 9 - </b>MAIOR que a IBGE e MENOR que a CSO <br>
                                              <b>11 - </b>Outros casos
                                              '
                                ),
                                icon = icon("question"),
                                width='350px',
                                right=T))),
            tabPanel(h5('Quantidade de indivíduos'),
                     column(11,
                            dataTableOutput('tabela_filtragem_individuos'))),
            tabPanel(h5('Exposição'),
                     column(11,
                            dataTableOutput('tabela_filtragem_exposicao'))),
            tabPanel(h5('Óbitos'),
                     column(11,
                            dataTableOutput('tabela_filtragem_obitos'))))),
        fil_2=fluidRow(tabsetPanel(
            tabPanel(h5('Quantidade de indivíduos'),
                     plotlyOutput('indv_filtragem_select',height='600px', width = '1000px')),
            tabPanel(h5('Exposição'),
                     plotlyOutput('expo_filtragem_select',height='600px', width = '1000px')),
            tabPanel(h5('Óbitos'),
                     plotlyOutput('obt_filtragem_select',height='600px', width = '1000px')),
            tabPanel(h5('Taxa de mortalidade'),
                     plotlyOutput('tabua_filtragem_select',height='600px', width = '1000px'))),align="center"),
        ######### Exposição #########
        pop_1=fluidRow(plotOutput("plot_cpf") %>% withSpinner(),align="center",style = social_distance),
        pop_2=fluidRow(plotlyOutput('plot_exp_etaria',height='600px', width = '1000px'),align="center",style= "padding-top: 20%;"),
        pop_3=fluidRow(
            column(6,
                   plotOutput('plot_heatmap_expM') %>% withSpinner(),align="center"),
            column(6,
                   plotOutput('plot_heatmap_expF') %>% withSpinner(),align="center"),style = "padding-bottom: 800px;"),
        ######### Óbitos #########
        obt_1=fluidRow(plotOutput('plot_obitos_ano') %>% withSpinner(),align="center",style = social_distance),
        obt_2=fluidRow(plotlyOutput('plot_obt_etaria',height='600px', width = '1000px'),align="center",style= "padding-top: 20%;"),
        obt_3=fluidRow(
            column(6,
                   plotOutput('plot_heatmap_obtM') %>% withSpinner(),align="center"),
            column(6,
                   plotOutput('plot_heatmap_obtF') %>% withSpinner(),align="center"),style = "padding-bottom: 800px;"),
        ######### Entradas em invalidez #########
        inv_1=fluidRow(plotOutput('plot_inv_ano') %>% withSpinner(),align="center",style = social_distance),
        inv_2=fluidRow(plotlyOutput('plot_inv_etaria',height='600px', width = '1000px'),align="center",style= "padding-top: 20%;"),
        inv_3=fluidRow(
            column(6,
                   plotOutput('plot_heatmap_invM') %>% withSpinner(),align="center"),
            column(6,
                   plotOutput('plot_heatmap_invF') %>% withSpinner(),align="center"),style = "padding-bottom: 800px;"),
        ######### Mx #########
        tx_1=fluidRow(tabsetPanel(
            tabPanel(h5('Com correção de óbitos'),
                     fluidRow(plotlyOutput('plot_Mx_dataprev_M',height='600px', width = '1000px'),align="center"),
                     fluidRow(plotlyOutput('plot_Mx_dataprev_F',height='600px', width = '1000px'),align="center"),
                     fluidRow(
                         column(6,
                                plotOutput('plot_heatmap_Mx_dataprevM') %>% withSpinner(),align="center"),
                         column(6,
                                plotOutput('plot_heatmap_Mx_dataprevF') %>% withSpinner(),align="center"))),
            tabPanel(h5('Sem correção de óbitos'),
                     fluidRow(plotlyOutput('plot_Mx_M',height='600px', width = '1000px'),align="center"),
                     fluidRow(plotlyOutput('plot_Mx_F',height='600px', width = '1000px'),align="center"),
                     fluidRow(
                         column(6,
                                plotOutput('plot_heatmap_MxM') %>% withSpinner(),align="center"),
                         column(6,
                                plotOutput('plot_heatmap_MxF') %>% withSpinner(),align="center")))
        ),align="center",style = "padding-bottom: 800px;"),
        tx_2=fluidRow(plotlyOutput('plot_razao_dataprev_M',height='600px', width = '1000px'),align="center"),
        tx_3=fluidRow(plotlyOutput('plot_razao_dataprev_F',height='600px', width = '1000px'),align="center"),
        ######### Taxa de entrada em invalidez #########
        tx_inv_1=fluidRow(plotlyOutput('plot_Mx_inv',height='600px', width = '1000px'),align="center"),
        ######### GI #########
        GI_1=fluidRow(plotOutput('plot_GI_total') %>% withSpinner(),align="center",style = social_distance),
        GI_2=fluidRow(plotOutput('plot_GI_stacked') %>% withSpinner(),align="center",style = social_distance),
        GI_3=fluidRow(plotlyOutput('plot_exp_GI',height='600px', width = '1000px'),align="center"),
        GI_4=fluidRow(plotlyOutput('plot_Mx_GI_M',height='600px', width = '1000px'),align="center"),
        GI_5=fluidRow(plotlyOutput('plot_Mx_GI_F',height='600px', width = '1000px'),align="center"),
        ######### Localização #########
        loc_1=fluidRow(
            column(1,offset=2,
                   fluidRow(radioButtons('log_loc','Escala',list('Padrão'=F,'Logarítmica'=T))),
                   fluidRow(numericInput('min_loc','Exposição mínima',value=0,min=0)),
                   fluidRow(sliderInput('ano_loc','Anos',min=2013,max=2017,value=c(2013,2017),sep='')),
                   fluidRow(actionButton('select_loc','Marcar tudo',width='120px')),
                   fluidRow(actionButton('unselect_loc','Desmarcar tudo',width='120px')),
                   align='left',
                   style='padding-top: 20%;'),
            column(6,
                   tabsetPanel(id='Loc',
                               tabPanel('Quantidade de indivíduos',plotlyOutput('plot_mapa_loc_qtd',height='800px', width = '800px')),
                               tabPanel('Exposição',plotlyOutput('plot_mapa_loc_exp',height='800px', width = '800px')),
                               tabPanel('Óbitos',plotlyOutput('plot_mapa_loc_obt',height='800px', width = '800px')),
                               tabPanel('Taxa média de mortalidade',plotlyOutput('plot_mapa_loc_tx',height='800px', width = '800px'))
                   )),
            align="center"),
        loc_2=fluidRow(column(8,offset=2,
                              tabsetPanel(tabPanel('Masculino',tabsetPanel(
                                  tabPanel('Taxa de mortalidade',plotlyOutput('tabua_uf_select_M',height='600px', width = '1000px')),
                                  tabPanel('Quantidade de indivíduos',plotlyOutput('indv_uf_select_M',height='600px', width = '1000px')),
                                  tabPanel('Exposição',plotlyOutput('exp_uf_select_M',height='600px', width = '1000px')),
                                  tabPanel('Óbitos',plotlyOutput('obt_uf_select_M',height='600px', width = '1000px'))
                              )),
                              tabPanel('Feminino',tabsetPanel(
                                  tabPanel('Taxa de mortalidade',plotlyOutput('tabua_uf_select_F',height='600px', width = '1000px')),
                                  tabPanel('Quantidade de indivíduos',plotlyOutput('indv_uf_select_F',height='600px', width = '1000px')),
                                  tabPanel('Exposição',plotlyOutput('exp_uf_select_F',height='600px', width = '1000px')),
                                  tabPanel('Óbitos',plotlyOutput('obt_uf_select_F',height='600px', width = '1000px'))
                              )))),
        align="center"),
        loc_3=fluidRow(
            column(1,offset=2,
                   fluidRow(radioButtons('log_region','Escala',list('Padrão'=F,'Logarítmica'=T))),
                   fluidRow(numericInput('min_region','Exposição mínima',value=0,min=0)),
                   fluidRow(sliderInput('ano_region','Anos',min=2013,max=2017,value=c(2013,2017),sep='')),
                   fluidRow(actionButton('select_region','Marcar tudo',width='120px')),
                   fluidRow(actionButton('unselect_region','Desmarcar tudo',width='120px')),
                   align='left',
                   style='padding-top: 20%;'),
            column(6,
                   tabsetPanel(id='region',
                               tabPanel('Quantidade de indivíduos',plotlyOutput('plot_mapa_region_qtd',height='800px', width = '800px')),
                               tabPanel('Exposição',plotlyOutput('plot_mapa_region_exp',height='800px', width = '800px')),
                               tabPanel('Óbitos',plotlyOutput('plot_mapa_region_obt',height='800px', width = '800px')),
                               tabPanel('Taxa média de mortalidade',plotlyOutput('plot_mapa_region_tx',height='800px', width = '800px'))
                   )),
            align="center"),
        loc_4=fluidRow(
            column(8,offset=2,
                   tabsetPanel(tabPanel('Masculino',tabsetPanel(
                       tabPanel('Taxa de mortalidade',plotlyOutput('tabua_region_select_M',height='600px', width = '1000px')),
                       tabPanel('Quantidade de indivíduos',plotlyOutput('indv_region_select_M',height='600px', width = '1000px')),
                       tabPanel('Exposição',plotlyOutput('exp_region_select_M',height='600px', width = '1000px')),
                       tabPanel('Óbitos',plotlyOutput('obt_region_select_M',height='600px', width = '1000px'))
                   )),
                   tabPanel('Feminino',tabsetPanel(
                       tabPanel('Taxa de mortalidade',plotlyOutput('tabua_region_select_F',height='600px', width = '1000px')),
                       tabPanel('Quantidade de indivíduos',plotlyOutput('indv_region_select_F',height='600px', width = '1000px')),
                       tabPanel('Exposição',plotlyOutput('exp_region_select_F',height='600px', width = '1000px')),
                       tabPanel('Óbitos',plotlyOutput('obt_region_select_F',height='600px', width = '1000px'))
                   )))),
        ################## }
            align="center")
    )
    }
    
    ###### Criando UI ######
    
    
    edit_mode_button=fluidRow(isolate(actionButton("edit_button", "Modo de edição",icon=icon('edit'),width='150px')))
    save_all_button=fluidRow(isolate(actionButton("save", "Salvar tudo",icon=icon('save'),width='150px')))
    
    observeEvent(input$edit_button,{
        if(loadData('edit_status.txt',paste0(dir,'textos/',paste0(emp,'_',cod_emp)))=='livre'){
            reac_val$edit_mode=reac_val$edit_mode+1
            saveData(input$user,paste0(dir,'textos/',paste0(emp,'_',cod_emp)),'edit_status.txt')
        }else{
            if(loadData('edit_status.txt',paste0(dir,'textos/',paste0(emp,'_',cod_emp)))==input$user){
                saveData('livre',paste0(dir,'textos/',paste0(emp,'_',cod_emp)),'edit_status.txt')
                reac_val$edit_mode=reac_val$edit_mode+1
            }else{
                showModal(modalDialog(
                    paste(loadData('edit_status.txt',paste0(dir,'textos/',paste0(emp,'_',cod_emp))),'está editando agora'),
                    title = h5('Não é possível acesar o mode de edição no momento!'),
                    footer = modalButton("Ok"),
                    easyClose = T,
                    fade = TRUE
                ))
            }
        }
        })
    
    valid_id=eventReactive(input$check_id,{
        return(input$user_status %in% valid_keys)
        })
    
    output$edit_mode=reactive({
        if(ifelse(is.null(input$edit_button),TRUE,FALSE)){}
        return(reac_val$edit_mode)
        })
    output$valid_id=reactive({
        if(valid_id()){
            removeModal()
            return(TRUE)
            }
    })
    
    output$invalid_key=reactive({
      check_id_holder=ifelse(is.null(input$check_id),0,input$check_id)
      user_status_holder=ifelse(is.null(input$user_status),0,input$user_status)
        if(check_id_holder>0 & str_count(user_status_holder)>0){
            return(TRUE)
        }else{
            return(F)   
        }
    })
    
    outputOptions(output,'invalid_key',suspendWhenHidden = FALSE)
    outputOptions(output,'valid_id',suspendWhenHidden = FALSE)
    outputOptions(output,'edit_mode',suspendWhenHidden = FALSE)
    
    column1=conditionalPanel('input.user_status=="f97c56aa6471c8700b91bf1c5c2d797057aa6fd2751fabe4069bba2278e5c3e3"',
                         column(3,
                                edit_mode_button,
                                save_all_button)
                         )
                         
    column2=column(3,
                   selectInput(
        "Cobertura",
        HTML("Cobertura"), 
        choices = list("Morte" = 'MOR',
                       "Sobrevivência" = 'SOB',
                       "Invalidez" = 'INV'),selected = 'MOR',width='150px'))
    
    output$prod_select=renderUI({
        lista=list()
        lista[['Todos']]='TODOS'
        if(input$Cobertura != 'INV'){
            valores=as.vector(unique(raw_dados$CLASSE[raw_dados$RAMO==input$Cobertura & raw_dados$TIPO=='PRODUTO']))
            for(valor in valores){
                lista[[valor]]=valor
            }
        }else{
            valores=as.vector(unique(raw_dados$CLASSE[raw_dados$RAMO==input$Cobertura & raw_dados$TIPO=='COBERTURA' & raw_dados$CLASSE!=input$Cobertura]))
            for(valor in valores){
                lista[[cobertura_label[[valor]]]]=valor
            }
        }
        
        nome=ifelse(input$Cobertura != 'INV','Produto','Cobertura')
        
        return(
            selectInput('Classe',
                        HTML(nome), 
                        choices = lista,
                        selected = 'TODOS',width='150px'))
    })
    
    column3=column(3,uiOutput('prod_select'))
    
    output$head_bar=renderUI({
        if(is.null(input$user_status)){}
        head_bar=fluidRow(fluidRow(
                                     column(6,offset=1,
                                        column1,
                                        column2,
                                        column3)))
        return(head_bar)
    })
    
    # Criando abas
    
    tab_intro=tabPanel(title=h5('Introdução'),
                       value='intro',
                       text_list[['intro']])
    
    tab_C1=tabPanel(title=h5('Crítica Inicial dos Arquivos Enviados'),
                    value='C1',
                    text_list[['C1_1']],
                    rows_list[['C1_1']],
                    text_list[['C1_2']])
    
    tab_Reg=tabPanel(title=h5('Consistência entre registros de Início e Fim'),
                     value='reg',
                     text_list[['reg_1']],
                     rows_list[['reg_1']],
                     rows_list[['reg_2']],
                     text_list[['reg_2']],
                     rows_list[['reg_3']],
                     rows_list[['reg_4']],
                     text_list[['reg_3']],
                     rows_list[['reg_5']],
                     rows_list[['reg_6']],
                     text_list[['reg_4']],
                     rows_list[['reg_7']],
                     text_list[['reg_5']],
                     rows_list[['reg_8']],
                     rows_list[['reg_9']],
                     text_list[['reg_6']])
    
    tab_Cor=tabPanel(h5('Coringas'),
                     value='cor',
                     text_list[['cor_1']],
                     rows_list[['cor_1']],
                     text_list[['cor_2']])
    
    tab_Fil=tabPanel(title=h5('Filtragem'),
                     value='fil',
                     text_list[['fil_1']],
                     rows_list[['fil_1']],
                     rows_list[['fil_2']])
    
    tab_pop=tabPanel(title=h5('População'),
                     value='pop',
                     text_list[['pop_1']],
                     rows_list[['pop_1']],
                     text_list[['pop_2']],
                     rows_list[['pop_2']],
                     text_list[['pop_3']],
                     rows_list[['pop_3']],
                     text_list[['pop_4']])
    
    tab_obt=tabPanel(title=h5('Óbitos'),
                     value='obt',
                     text_list[['obt_1']],
                     rows_list[['obt_1']],
                     text_list[['obt_2']],
                     rows_list[['obt_2']],
                     text_list[['obt_3']],
                     rows_list[['obt_3']],
                     text_list[['obt_4']])
    
    tab_Mx=tabPanel(title=h5('Taxas de mortalidade'),
                    value='tx',
                    text_list[['tx_1']],
                    rows_list[['tx_1']],
                    rows_list[['tx_2']],
                    rows_list[['tx_3']]
    )
    
    tab_Inv=tabPanel(title=h5('Entrada em invalidez'),
                     value='inv',
                     text_list[['inv_1']],
                     rows_list[['inv_1']],
                     text_list[['inv_2']],
                     rows_list[['inv_2']],
                     text_list[['inv_3']],
                     rows_list[['inv_3']],
                     text_list[['inv_4']])
    
    tab_Mx_inv=tabPanel(title=h5('Taxas de entrada em invalidez'),
                        value='tx_inv',
                        text_list[['tx_inv_1']],
                        rows_list[['tx_inv_1']],
                        text_list[['tx_inv_2']])
    
    tab_GI=tabPanel(title=h5('Grau de instrução'),
                    value='GI',
                    text_list[['GI_1']],
                    rows_list[['GI_1']],
                    text_list[['GI_2']],
                    rows_list[['GI_2']],
                    text_list[['GI_3']],
                    rows_list[['GI_3']],
                    text_list[['GI_4']],
                    rows_list[['GI_4']],
                    rows_list[['GI_5']],
                    text_list[['GI_5']]
    )
    
    tab_Loc=tabPanel(title=h5('Localização'),
                     value='loc',
                     tabsetPanel(
                         tabPanel('UF',
                                  text_list[['loc_1']],
                                  rows_list[['loc_1']],
                                  text_list[['loc_2']],
                                  rows_list[['loc_2']]),
                         tabPanel('Região',
                                  text_list[['loc_3']],
                                  rows_list[['loc_3']],
                                  text_list[['loc_4']],
                                  rows_list[['loc_4']])
                     )
    )
    
    # Atualizando aba atual
    observeEvent(input$Panel,{
        reac_val$tab_name=input$Panel
        })
    
    # Ao fazer a transição de UI (para outra cobertura e/ou produto), esta parte do código coloca o usuário na aba adequada ao fazer a transição.
    observeEvent(c(input$Cobertura,input$Classe),{
        if((input$Cobertura=="INV" &                                                              reac_val$tab_name %in% c('obt','tx','GI','loc'))    |
           (input$Cobertura=="INV" & ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'& reac_val$tab_name %in% c('inv','tx_inv'))           |
           (input$Cobertura!="INV" & ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'& reac_val$tab_name %in% c('inv','tx_inv'))           |
           (input$Cobertura!="INV" & ifelse(is.null(input$Classe),'TODOS',input$Classe)!='TODOS'& reac_val$tab_name %in% c('inv','tx_inv','GI','loc','fil'))){
            reac_val$tab_name='intro'
        }
        
        updateTabsetPanel(session, inputId='Panel',selected=reac_val$tab_name)
    })
    
    output$title=renderUI({
      fluidRow(HTML(paste0("<h1>Relatório sobre os dados enviados pela empresa<br>",empresa_nome,'</h1>')),align = 'center',style="margin-bottom: 50px; margin-top: 50px; vertical-align:center;")
      
    })
    
    output$ui=renderUI({
        if(ifelse(is.null(input$Cobertura),'MOR',input$Cobertura)=="INV"){
            if(ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
                out_guy=column(10,offset=1,
                               tabsetPanel(id = 'Panel',
                                           tab_intro,
                                           tab_C1,
                                           tab_Reg,
                                           tab_Cor,
                                           tab_pop,
                                           selected='intro'))
            }else{
                out_guy=column(10,offset=1,
                               tabsetPanel(id = 'Panel',
                                           tab_intro,
                                           tab_C1,
                                           tab_Reg,
                                           tab_Cor,
                                           tab_pop,
                                           tab_Inv,
                                           tab_Mx_inv,
                                           selected='intro'))
            }
        }else{
            if(ifelse(is.null(input$Cobertura),'MOR',input$Cobertura)!="INV" & ifelse(is.null(input$Classe),'TODOS',input$Classe)=='TODOS'){
                out_guy=column(10,offset=1,
                               tabsetPanel(id = 'Panel',
                                           tab_intro,
                                           tab_C1,
                                           tab_Reg,
                                           tab_Cor,
                                           tab_Fil,
                                           tab_pop,
                                           tab_obt,
                                           tab_Mx,
                                           tab_GI,
                                           tab_Loc,
                                           selected='intro'))
            }else{
                out_guy=column(10,offset=1,
                               tabsetPanel(id = 'Panel',
                                           tab_intro,
                                           tab_C1,
                                           tab_Reg,
                                           tab_Cor,
                                           tab_pop,
                                           tab_obt,
                                           tab_Mx,
                                           selected='intro'))
            }
        }
        return(out_guy)
    })
})
